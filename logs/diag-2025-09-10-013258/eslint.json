[
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/dashboard/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/layout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OrgSwitcherBadge' is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PendingQueueBadge' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'QueueEvents' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OfflineIndicator' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'RegisterSW' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import OrgSwitcherBadge from \"@/components/OrgSwitcherBadge\";\nimport PendingQueueBadge from \"@/components/PendingQueueBadge\";\nimport QueueEvents from \"@/components/QueueEvents\";\nimport OfflineIndicator from \"@/components/OfflineIndicator\";\nimport RegisterSW from \"@/components/RegisterSW\";\n// app/(app)/layout.tsx\nimport type { Metadata } from \"next\";\nimport AppShell from \"@/components/AppShell\";\nimport AuthGate from \"@/components/AuthGate\";\n\nexport const metadata: Metadata = {\n  title: \"Sanoa — Tablero\",\n};\n\nexport default function AppGroupLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <AuthGate>\n      <AppShell>{children}</AppShell>\n    </AuthGate>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/pacientes/[id]/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 253,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 253,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7489, 7492], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7489, 7492], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 380,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 380,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11067, 11070], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11067, 11070], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 916,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 916,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [33150, 33153], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [33150, 33153], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport type { Gender } from \"@/lib/database.types\";\nimport { useEffect, useState, useCallback, useRef } from \"react\";\nimport Link from \"next/link\";\nimport { useParams } from \"next/navigation\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport { getPatient, updatePatient, type Patient } from \"@/lib/patients\";\nimport { listNotes, createNote, deleteNote, type PatientNote } from \"@/lib/patient-notes\";\nimport {\n  listPatientFiles,\n  uploadPatientFile,\n  getSignedUrl,\n  deletePatientFile,\n  type PatientFile,\n} from \"@/lib/patient-files\";\nimport { listShares, addShare, revokeShare, type PatientShare } from \"@/lib/patient-shares\";\nimport { listAudit, fmtAuditRow, type AuditEntry } from \"@/lib/audit\";\nimport { showToast } from \"@/components/Toaster\";\nimport Modal from \"@/components/Modal\";\nimport { useNotesRealtime } from \"@/hooks/useNotesRealtime\";\nimport ExportPDFButton from \"@/components/ExportPDFButton\";\n\ntype PendingNote = PatientNote & { pending?: boolean };\ntype PendingFile = PatientFile & { pending?: boolean };\n\nexport default function PacienteDetailPage() {\n  const { id } = useParams<{ id: string }>();\n  const supabase = getSupabaseBrowser();\n\n  const [meId, setMeId] = useState<string | null>(null);\n  const [meEmail, setMeEmail] = useState<string | null>(null);\n\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const [shares, setShares] = useState<PatientShare[]>([]);\n  const isOwner = patient && meId ? patient.user_id === meId : false;\n  const myShare = shares.find(\n    (s) => s.grantee_email.toLowerCase() === (meEmail || \"\").toLowerCase(),\n  );\n  const canEdit = Boolean(isOwner || myShare?.can_edit);\n\n  const [openEdit, setOpenEdit] = useState(false);\n  const [nombre, setNombre] = useState(\"\");\n  const [edad, setEdad] = useState<number | \"\">(\"\");\n  const [genero, setGenero] = useState<Gender | \"\">(\"O\");\n  const [savingEdit, setSavingEdit] = useState(false);\n\n  const [notes, setNotes] = useState<PendingNote[]>([]);\n  const [noteText, setNoteText] = useState(\"\");\n  const [savingNote, setSavingNote] = useState(false);\n  const [loadingNotes, setLoadingNotes] = useState(true);\n\n  const [files, setFiles] = useState<PendingFile[]>([]);\n  const [loadingFiles, setLoadingFiles] = useState(true);\n  const [uploading, setUploading] = useState(false);\n\n  const [shareEmail, setShareEmail] = useState(\"\");\n  const [shareCanEdit, setShareCanEdit] = useState(false);\n  const [sharing, setSharing] = useState(false);\n\n  const [audits, setAudits] = useState<AuditEntry[]>([]);\n  const [loadingAudits, setLoadingAudits] = useState(true);\n\n  const printRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await supabase.auth.getUser();\n      setMeId(data.user?.id ?? null);\n      setMeEmail(data.user?.email ?? null);\n    })();\n  }, [supabase]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const p = await getPatient(id);\n        setPatient(p);\n        setNombre(p?.nombre ?? \"\");\n        setEdad(p?.edad ?? \"\");\n        setGenero((p?.genero as \"F\" | \"M\" | \"O\") ?? \"O\");\n      } catch (e: unknown) {\n        console.error(\n          e instanceof Error\n            ? e\n            : (() => {\n                try {\n                  return JSON.stringify(e);\n                } catch {\n                  return String(e);\n                }\n              })(),\n        );\n        showToast(e?.message || \"No se pudo cargar el paciente.\", \"error\");\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [id]);\n\n  const refreshNotes = useCallback(async () => {\n    setLoadingNotes(true);\n    try {\n      const data = await listNotes(id);\n      setNotes(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudieron cargar las notas.\", \"error\");\n    } finally {\n      setLoadingNotes(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshNotes();\n  }, [refreshNotes]);\n  useNotesRealtime(\n    id,\n    () => {\n      refreshNotes();\n    },\n    250,\n  );\n\n  const refreshFiles = useCallback(async () => {\n    setLoadingFiles(true);\n    try {\n      const data = await listPatientFiles(id);\n      setFiles(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudieron cargar los archivos.\", \"error\");\n    } finally {\n      setLoadingFiles(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshFiles();\n  }, [refreshFiles]);\n\n  const refreshShares = useCallback(async () => {\n    try {\n      const data = await listShares(id);\n      setShares(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshShares();\n  }, [refreshShares]);\n\n  const refreshAudits = useCallback(async () => {\n    setLoadingAudits(true);\n    try {\n      const data = await listAudit(id, 200);\n      setAudits(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo cargar la actividad.\", \"error\");\n    } finally {\n      setLoadingAudits(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshAudits();\n  }, [refreshAudits]);\n\n  // Al terminar el replay de la cola → refresca notas/archivos y limpia pendientes\n  useEffect(() => {\n    const onMsg = (e: MessageEvent) => {\n      const t = (e.data || {}).type;\n      if (t === \"queue:replay-success\") {\n        refreshNotes();\n        refreshFiles();\n      }\n    };\n    navigator.serviceWorker?.addEventListener?.(\"message\", onMsg);\n    return () => navigator.serviceWorker?.removeEventListener?.(\"message\", onMsg);\n  }, [refreshNotes, refreshFiles]);\n\n  async function onAddNote(e: React.FormEvent) {\n    e.preventDefault();\n    if (!canEdit) {\n      showToast(\"No tienes permisos para agregar notas.\", \"error\");\n      return;\n    }\n    const text = noteText.trim();\n    if (text.length < 2) {\n      showToast(\"Escribe al menos 2 caracteres.\", \"info\");\n      return;\n    }\n    setSavingNote(true);\n    try {\n      const n = await createNote(id, text);\n      setNotes((prev) => [n as PendingNote, ...prev]);\n      setNoteText(\"\");\n      showToast(\"Nota guardada.\", \"success\");\n    } catch (e: unknown) {\n      // Optimista: offline → agrega placeholder pendiente\n      if (typeof navigator !== \"undefined\" && !navigator.onLine) {\n        const temp: PendingNote = {\n          id: `local-${Date.now()}`,\n          patient_id: id,\n          content: text + \" (pendiente…)\",\n          created_at: new Date().toISOString(),\n          pending: true,\n        } as any;\n        setNotes((prev) => [temp, ...prev]);\n        setNoteText(\"\");\n        showToast(\"Nota encolada (sin conexión).\", \"info\");\n      } else {\n        console.error(\n          e instanceof Error\n            ? e\n            : (() => {\n                try {\n                  return JSON.stringify(e);\n                } catch {\n                  return String(e);\n                }\n              })(),\n        );\n        showToast(e?.message || \"No se pudo guardar la nota.\", \"error\");\n      }\n    } finally {\n      setSavingNote(false);\n    }\n  }\n\n  async function onDeleteNote(nid: string) {\n    if (!canEdit) {\n      showToast(\"No tienes permisos para borrar notas.\", \"error\");\n      return;\n    }\n    const local = nid.startsWith(\"local-\");\n    if (local) {\n      setNotes((prev) => prev.filter((n) => n.id !== nid));\n      return;\n    }\n    if (!confirm(\"¿Eliminar nota?\")) return;\n    try {\n      await deleteNote(nid);\n      setNotes((prev) => prev.filter((n) => n.id !== nid));\n      showToast(\"Nota eliminada.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo eliminar la nota.\", \"error\");\n    }\n  }\n\n  function openEditModal() {\n    if (!patient) return;\n    setNombre(patient.nombre);\n    setEdad(patient?.edad ?? \"\");\n    setGenero((patient?.genero as \"F\" | \"M\" | \"O\") ?? \"O\");\n    setOpenEdit(true);\n  }\n\n  async function onSaveEdit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!canEdit) {\n      showToast(\"No tienes permisos para editar.\", \"error\");\n      return;\n    }\n    const n = (nombre || \"\").trim();\n    const eNum = typeof edad === \"string\" ? Number(edad || 0) : edad;\n    if (!n) {\n      showToast(\"El nombre es obligatorio.\", \"info\");\n      return;\n    }\n    if (!Number.isFinite(eNum) || eNum < 0) {\n      showToast(\"Edad inválida.\", \"error\");\n      return;\n    }\n\n    try {\n      setSavingEdit(true);\n      const updated = await updatePatient(id, { nombre: n, edad: eNum, genero });\n      setPatient(updated);\n      setOpenEdit(false);\n      showToast(\"Datos actualizados.\", \"success\");\n    } catch (err: unknown) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      showToast(err?.message || \"No se pudo actualizar.\", \"error\");\n    } finally {\n      setSavingEdit(false);\n    }\n  }\n\n  async function onUpload(e: React.ChangeEvent<HTMLInputElement>) {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    if (!canEdit) {\n      showToast(\"No tienes permisos para subir archivos.\", \"error\");\n      return;\n    }\n    setUploading(true);\n    try {\n      await uploadPatientFile(id, file);\n      await refreshFiles();\n      (e.target as HTMLInputElement).value = \"\";\n      showToast(\"Archivo subido.\", \"success\");\n    } catch (err: unknown) {\n      if (typeof navigator !== \"undefined\" && !navigator.onLine) {\n        // Optimista: archivo pendiente\n        const temp: PendingFile = {\n          id: `local-${Date.now()}`,\n          patient_id: id,\n          file_name: file.name,\n          size: file.size,\n          mime_type: file.type || \"desconocido\",\n          created_at: new Date().toISOString(),\n          pending: true,\n        } as any;\n        setFiles((prev) => [temp, ...prev]);\n        (e.target as HTMLInputElement).value = \"\";\n        showToast(\"Archivo encolado (sin conexión).\", \"info\");\n      } else {\n        console.error(\n          err instanceof Error\n            ? err\n            : (() => {\n                try {\n                  return JSON.stringify(err);\n                } catch {\n                  return String(err);\n                }\n              })(),\n        );\n        showToast(err?.message || \"No se pudo subir el archivo.\", \"error\");\n      }\n    } finally {\n      setUploading(false);\n    }\n  }\n\n  async function onView(pf: PatientFile) {\n    try {\n      const url = await getSignedUrl(pf, 300);\n      window.open(url, \"_blank\", \"noopener,noreferrer\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo generar el enlace.\", \"error\");\n    }\n  }\n\n  async function onCopy(pf: PatientFile) {\n    try {\n      const url = await getSignedUrl(pf, 300);\n      await navigator.clipboard.writeText(url);\n      showToast(\"Enlace copiado (300s).\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo copiar el enlace.\", \"error\");\n    }\n  }\n\n  async function onDeleteFile(idRec: string) {\n    const local = idRec.startsWith(\"local-\");\n    if (local) {\n      setFiles((prev) => prev.filter((f) => f.id !== idRec));\n      return;\n    }\n    if (!canEdit) {\n      showToast(\"No tienes permisos para eliminar archivos.\", \"error\");\n      return;\n    }\n    if (!confirm(\"¿Eliminar archivo?\")) return;\n    try {\n      await deletePatientFile(idRec);\n      setFiles((prev) => prev.filter((f) => f.id !== idRec));\n      showToast(\"Archivo eliminado.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo eliminar.\", \"error\");\n    }\n  }\n\n  async function onShare(e: React.FormEvent) {\n    e.preventDefault();\n    if (!isOwner) {\n      showToast(\"Solo el dueño puede compartir.\", \"error\");\n      return;\n    }\n    const email = shareEmail.trim();\n    if (!/^[^@]+@[^@]+\\.[^@]+$/.test(email)) {\n      showToast(\"Email inválido.\", \"error\");\n      return;\n    }\n    setSharing(true);\n    try {\n      await addShare(id, email, shareCanEdit);\n      setShareEmail(\"\");\n      setShareCanEdit(false);\n      await refreshShares();\n      showToast(\"Acceso compartido.\", \"success\");\n    } catch (err: unknown) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      showToast(err?.message || \"No se pudo compartir.\", \"error\");\n    } finally {\n      setSharing(false);\n    }\n  }\n\n  async function onRevoke(shareId: string) {\n    if (!isOwner) return;\n    if (!confirm(\"¿Quitar acceso?\")) return;\n    try {\n      await revokeShare(shareId);\n      setShares((prev) => prev.filter((s) => s.id !== shareId));\n      showToast(\"Acceso revocado.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo revocar.\", \"error\");\n    }\n  }\n\n  if (loading)\n    return (\n      <main className=\"p-6 md:p-10\">\n        <p>Cargando…</p>\n      </main>\n    );\n\n  if (!patient) {\n    return (\n      <main className=\"p-6 md:p-10\">\n        <div className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-6\">\n          <p className=\"text-red-600\">Paciente no encontrado.</p>\n          <Link\n            href=\"/pacientes\"\n            className=\"mt-3 inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n          >\n            <ColorEmoji token=\"atras\" size={16} /> Volver\n          </Link>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-6\">\n      {/* === ÁREA EXPORTABLE === */}\n      <div ref={printRef} className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl md:text-3xl font-semibold text-[var(--color-brand-text)] flex items-center gap-3\">\n            <ColorEmoji token=\"usuario\" size={24} /> {patient.nombre}\n          </h1>\n          <div className=\"flex flex-wrap items-center gap-2\" data-html2canvas-ignore=\"true\">\n            <ExportPDFButton targetRef={printRef} filename={`Paciente-${patient.nombre}.pdf`} />\n            {canEdit && (\n              <button\n                onClick={openEditModal}\n                className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n              >\n                <ColorEmoji token=\"puzzle\" size={16} /> Editar\n              </button>\n            )}\n            <Link\n              href=\"/pacientes\"\n              className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n            >\n              <ColorEmoji token=\"atras\" size={16} /> Volver\n            </Link>\n          </div>\n        </div>\n\n        {/* Datos básicos */}\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div>\n              <h2 className=\"font-semibold text-[var(--color-brand-text)]\">Datos básicos</h2>\n              <p className=\"text-[var(--color-brand-bluegray)] mt-1 text-sm\">\n                Edad: {patient.edad} · Género: {patient.genero}\n              </p>\n            </div>\n            <div>\n              <h2 className=\"font-semibold text-[var(--color-brand-text)]\">Creación</h2>\n              <p className=\"text-[var(--color-brand-bluegray)] mt-1 text-sm\">\n                {new Date(patient.created_at).toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Notas clínicas */}\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 space-y-4\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"puzzle\" size={18} /> Notas clínicas\n            </h2>\n\n            <form onSubmit={onAddNote} className=\"space-y-3\" data-html2canvas-ignore=\"true\">\n              <textarea\n                value={noteText}\n                onChange={(e) => setNoteText(e.target.value)}\n                placeholder={canEdit ? \"Escribe una nota clínica breve…\" : \"Solo lectura\"}\n                rows={3}\n                disabled={!canEdit}\n                className=\"w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2 disabled:opacity-60\"\n              />\n              <div className=\"flex gap-2\">\n                <button\n                  disabled={savingNote || !canEdit}\n                  className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n                >\n                  <ColorEmoji token=\"guardar\" size={16} />{\" \"}\n                  {savingNote ? \"Guardando…\" : \"Añadir nota\"}\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={refreshNotes}\n                  className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                >\n                  <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n                </button>\n              </div>\n            </form>\n\n            <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n            {loadingNotes ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">Cargando notas…</p>\n            ) : notes.length === 0 ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">Aún no hay notas.</p>\n            ) : (\n              <ul className=\"space-y-3\">\n                {notes.map((n) => (\n                  <li\n                    key={n.id}\n                    className={`rounded-xl border bg-white p-4 ${n.pending ? \"opacity-80 border-dashed\" : \"border-[var(--color-brand-border)]\"}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"text-sm text-[var(--color-brand-text)] whitespace-pre-wrap\">\n                        {n.content}\n                        {n.pending && (\n                          <span className=\"ml-2 inline-flex items-center gap-1 text-xs text-[var(--color-brand-bluegray)]\">\n                            <ColorEmoji token=\"refrescar\" size={14} /> Pendiente\n                          </span>\n                        )}\n                      </div>\n                      {canEdit && (\n                        <button\n                          onClick={() => onDeleteNote(n.id)}\n                          className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                          title=\"Eliminar nota\"\n                          data-html2canvas-ignore=\"true\"\n                        >\n                          <ColorEmoji token=\"borrar\" size={14} /> Borrar\n                        </button>\n                      )}\n                    </div>\n                    <div className=\"mt-2 text-xs text-[var(--color-brand-bluegray)]\">\n                      {new Date(n.created_at).toLocaleString()}\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </section>\n      </div>\n      {/* === FIN ÁREA EXPORTABLE === */}\n\n      {/* Archivos clínicos */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6 space-y-4\">\n          <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n            <ColorEmoji token=\"carpeta\" size={18} /> Archivos clínicos\n          </h2>\n\n          <div className=\"flex flex-wrap items-center gap-3\">\n            <label\n              className={`inline-flex items-center gap-2 rounded-xl border border-dashed border-[var(--color-brand-border)] bg-[var(--color-brand-background)] px-4 py-2 ${!canEdit ? \"opacity-60 cursor-not-allowed\" : \"cursor-pointer hover:opacity-90\"}`}\n            >\n              <ColorEmoji token=\"subir\" size={18} /> {uploading ? \"Subiendo…\" : \"Subir archivo\"}\n              <input type=\"file\" onChange={onUpload} className=\"hidden\" disabled={!canEdit} />\n            </label>\n            <button\n              type=\"button\"\n              onClick={refreshFiles}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n            </button>\n          </div>\n\n          <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n          {loadingFiles ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Cargando archivos…</p>\n          ) : files.length === 0 ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Aún no hay archivos.</p>\n          ) : (\n            <ul className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3\">\n              {files.map((f) => (\n                <li\n                  key={f.id}\n                  className={`rounded-2xl border p-4 bg-white ${f.pending ? \"opacity-80 border-dashed\" : \"border-[var(--color-brand-border)]\"}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"rounded-xl p-3 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                      <ColorEmoji token=\"archivo\" size={20} />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <div\n                        className=\"truncate text-[var(--color-brand-text)] text-sm font-medium\"\n                        title={f.file_name}\n                      >\n                        {f.file_name}{\" \"}\n                        {f.pending && (\n                          <span className=\"ml-2 text-xs text-[var(--color-brand-bluegray)]\">\n                            (Pendiente)\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-[var(--color-brand-bluegray)]\">\n                        {f.mime_type || \"desconocido\"} ·{\" \"}\n                        {f.size ? `${(f.size / 1024).toFixed(1)} KB` : \"\"}\n                      </div>\n                      <div className=\"mt-3 flex flex-wrap gap-2\">\n                        {!f.pending && (\n                          <>\n                            <button\n                              onClick={() => onView(f)}\n                              className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs hover:bg-[var(--color-brand-background)] inline-flex items-center gap-1\"\n                            >\n                              <ColorEmoji token=\"ver\" size={14} /> Ver\n                            </button>\n                            <button\n                              onClick={() => onCopy(f)}\n                              className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs hover:bg-[var(--color-brand-background)] inline-flex items-center gap-1\"\n                            >\n                              <ColorEmoji token=\"link\" size={14} /> Copiar link\n                            </button>\n                            {canEdit && (\n                              <button\n                                onClick={() => onDeleteFile(f.id)}\n                                className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                              >\n                                <ColorEmoji token=\"borrar\" size={14} /> Eliminar\n                              </button>\n                            )}\n                          </>\n                        )}\n                        {f.pending && (\n                          <button\n                            onClick={() => onDeleteFile(f.id)}\n                            className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs inline-flex items-center gap-1\"\n                          >\n                            <ColorEmoji token=\"borrar\" size={14} /> Quitar pendiente\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </section>\n\n      {/* Compartir (solo dueño) */}\n      {isOwner && (\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 space-y-4\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"compartir\" size={18} /> Compartir acceso\n            </h2>\n\n            <form onSubmit={onShare} className=\"grid grid-cols-1 sm:grid-cols-5 gap-3\">\n              <input\n                type=\"email\"\n                value={shareEmail}\n                onChange={(e) => setShareEmail(e.target.value)}\n                placeholder=\"email@dominio.com\"\n                className=\"sm:col-span-3 rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n              <label className=\"inline-flex items-center gap-2 px-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={shareCanEdit}\n                  onChange={(e) => setShareCanEdit(e.target.checked)}\n                />\n                Puede editar\n              </label>\n              <button\n                className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 flex items-center justify-center gap-2\"\n                disabled={sharing}\n              >\n                <ColorEmoji token=\"enviar\" size={16} /> {sharing ? \"Compartiendo…\" : \"Compartir\"}\n              </button>\n            </form>\n\n            <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n            {shares.length === 0 ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">\n                Aún no has compartido este paciente.\n              </p>\n            ) : (\n              <ul className=\"space-y-2\">\n                {shares.map((s) => (\n                  <li\n                    key={s.id}\n                    className=\"flex items-center justify-between rounded-xl border border-[var(--color-brand-border)] bg-white px-4 py-2\"\n                  >\n                    <div className=\"min-w-0\">\n                      <div className=\"text-sm text-[var(--color-brand-text)] truncate\">\n                        {s.grantee_email}\n                      </div>\n                      <div className=\"text-xs text-[var(--color-brand-bluegray)]\">\n                        {s.can_edit ? \"Puede editar\" : \"Solo lectura\"}\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => onRevoke(s.id)}\n                      className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                    >\n                      <ColorEmoji token=\"borrar\" size={14} /> Revocar\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Actividad */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"actividad\" size={18} /> Actividad\n            </h2>\n            <button\n              type=\"button\"\n              onClick={refreshAudits}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n            </button>\n          </div>\n\n          {loadingAudits ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Cargando actividad…</p>\n          ) : audits.length === 0 ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Sin eventos aún.</p>\n          ) : (\n            <ul className=\"space-y-2\">\n              {audits.map((a) => (\n                <li\n                  key={a.id}\n                  className=\"rounded-xl border border-[var(--color-brand-border)] bg-white px-4 py-2 text-sm text-[var(--color-brand-text)]\"\n                >\n                  {fmtAuditRow(a)}\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </section>\n\n      {/* Modal Editar */}\n      <Modal\n        open={openEdit}\n        onClose={() => setOpenEdit(false)}\n        title=\"Editar paciente\"\n        widthClass=\"max-w-xl\"\n      >\n        <form onSubmit={onSaveEdit} className=\"space-y-3\">\n          <label className=\"block\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Nombre</span>\n            <input\n              value={nombre}\n              onChange={(e) => setNombre(e.target.value)}\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              placeholder=\"Nombre completo\"\n              disabled={!canEdit}\n            />\n          </label>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <label className=\"block\">\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad</span>\n              <input\n                value={edad}\n                onChange={(e) => setEdad(e.target.value === \"\" ? \"\" : Number(e.target.value))}\n                type=\"number\"\n                min={0}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n                disabled={!canEdit}\n              />\n            </label>\n            <label className=\"block\">\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Género</span>\n              <select\n                value={genero}\n                onChange={(e) => setGenero(e.target.value as any)}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n                disabled={!canEdit}\n              >\n                <option value=\"F\">Femenino</option>\n                <option value=\"M\">Masculino</option>\n                <option value=\"O\">Otro</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"pt-2 flex justify-end gap-2\">\n            <button\n              type=\"button\"\n              onClick={() => setOpenEdit(false)}\n              className=\"rounded-md border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)]\"\n            >\n              Cancelar\n            </button>\n            <button\n              disabled={savingEdit || !canEdit}\n              className=\"rounded-md bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"guardar\" size={16} />{\" \"}\n              {savingEdit ? \"Guardando…\" : \"Guardar cambios\"}\n            </button>\n          </div>\n        </form>\n      </Modal>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/pacientes/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 85,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 88,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3330, 3333], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3330, 3333], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 173,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 173,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6312, 6315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6312, 6315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 185,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 185,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6920, 6923], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6920, 6923], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'doSearch'. Either include it or remove the dependency array.",
        "line": 51,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 51,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [doSearch]",
            "fix": { "range": [1420, 1422], "text": "[doSearch]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport Link from \"next/link\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport {\n  searchPatients,\n  type PatientSearchFilters,\n  type PatientSearchResult,\n} from \"@/lib/patients-search\";\n\nexport default function PacientesPage() {\n  const [filters, setFilters] = useState<PatientSearchFilters>({\n    q: \"\",\n    genero: \"ALL\",\n    edadMin: null,\n    edadMax: null,\n    createdFrom: null,\n    createdTo: null,\n    orderBy: \"created_at\",\n    orderDir: \"desc\",\n    page: 1,\n    pageSize: 10,\n  });\n  const [result, setResult] = useState<PatientSearchResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [err, setErr] = useState<string | null>(null);\n\n  const totalPages = useMemo(() => {\n    if (!result) return 1;\n    return Math.max(1, Math.ceil(result.count / result.pageSize));\n  }, [result]);\n\n  async function doSearch(nextPage?: number) {\n    setLoading(true);\n    setErr(null);\n    try {\n      const rs = await searchPatients({ ...filters, page: nextPage ?? filters.page });\n      setResult(rs);\n      setFilters((f) => ({ ...f, page: rs.page })); // sincroniza\n    } catch (e: unknown) {\n      setErr(e?.message || \"No se pudo buscar.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    // primera carga\n    doSearch(1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    doSearch(1);\n  }\n\n  function onClear() {\n    setFilters({\n      q: \"\",\n      genero: \"ALL\",\n      edadMin: null,\n      edadMax: null,\n      createdFrom: null,\n      createdTo: null,\n      orderBy: \"created_at\",\n      orderDir: \"desc\",\n      page: 1,\n      pageSize: 10,\n    });\n    setTimeout(() => doSearch(1), 0);\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-6\">\n      <header className=\"space-y-2\">\n        <h1 className=\"text-2xl md:text-3xl font-semibold text-[var(--color-brand-text)] flex items-center gap-3\">\n          <ColorEmoji token=\"pacientes\" size={24} />\n          Pacientes\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Filtra por nombre, género, edad y fechas. Resultados visibles respetan tus permisos\n          (propios o compartidos).\n        </p>\n      </header>\n\n      {/* Filtros */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <form onSubmit={onSubmit} className=\"p-6 grid grid-cols-1 md:grid-cols-12 gap-3\">\n          <label className=\"md:col-span-4\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Nombre</span>\n            <input\n              value={filters.q || \"\"}\n              onChange={(e) => setFilters((f) => ({ ...f, q: e.target.value }))}\n              placeholder=\"Buscar por nombre…\"\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            />\n          </label>\n\n          <label className=\"md:col-span-2\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Género</span>\n            <select\n              value={filters.genero || \"ALL\"}\n              onChange={(e) => setFilters((f) => ({ ...f, genero: e.target.value as any }))}\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            >\n              <option value=\"ALL\">Todos</option>\n              <option value=\"F\">Femenino</option>\n              <option value=\"M\">Masculino</option>\n              <option value=\"O\">Otro</option>\n            </select>\n          </label>\n\n          <div className=\"md:col-span-2 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad mín.</span>\n              <input\n                type=\"number\"\n                min={0}\n                value={filters.edadMin ?? \"\"}\n                onChange={(e) =>\n                  setFilters((f) => ({\n                    ...f,\n                    edadMin: e.target.value === \"\" ? null : Number(e.target.value),\n                  }))\n                }\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad máx.</span>\n              <input\n                type=\"number\"\n                min={0}\n                value={filters.edadMax ?? \"\"}\n                onChange={(e) =>\n                  setFilters((f) => ({\n                    ...f,\n                    edadMax: e.target.value === \"\" ? null : Number(e.target.value),\n                  }))\n                }\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n          </div>\n\n          <div className=\"md:col-span-3 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Desde</span>\n              <input\n                type=\"date\"\n                value={filters.createdFrom ?? \"\"}\n                onChange={(e) => setFilters((f) => ({ ...f, createdFrom: e.target.value || null }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Hasta</span>\n              <input\n                type=\"date\"\n                value={filters.createdTo ?? \"\"}\n                onChange={(e) => setFilters((f) => ({ ...f, createdTo: e.target.value || null }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n          </div>\n\n          <div className=\"md:col-span-3 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Ordenar por</span>\n              <select\n                value={filters.orderBy}\n                onChange={(e) => setFilters((f) => ({ ...f, orderBy: e.target.value as any }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              >\n                <option value=\"created_at\">Fecha</option>\n                <option value=\"nombre\">Nombre</option>\n                <option value=\"edad\">Edad</option>\n              </select>\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Dirección</span>\n              <select\n                value={filters.orderDir}\n                onChange={(e) => setFilters((f) => ({ ...f, orderDir: e.target.value as any }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              >\n                <option value=\"desc\">Desc</option>\n                <option value=\"asc\">Asc</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"md:col-span-12 flex flex-wrap gap-3 pt-1\">\n            <button\n              className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n              disabled={loading}\n              type=\"submit\"\n            >\n              <ColorEmoji token=\"buscar\" size={16} /> {loading ? \"Buscando…\" : \"Buscar\"}\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={onClear}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"limpiar\" size={16} /> Limpiar\n            </button>\n\n            <div className=\"text-sm text-[var(--color-brand-bluegray)] self-center ml-auto\">\n              Página {result?.page ?? 1} de {totalPages} · {result?.count ?? 0} resultados\n            </div>\n          </div>\n        </form>\n      </section>\n\n      {/* Resultados */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6\">\n          {err && <p className=\"text-red-600 text-sm mb-3\">{err}</p>}\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full text-sm\">\n              <thead>\n                <tr className=\"text-left text-[var(--color-brand-text)] border-b border-[var(--color-brand-border)]\">\n                  <th className=\"py-2 pr-3\">Nombre</th>\n                  <th className=\"py-2 px-3\">Edad</th>\n                  <th className=\"py-2 px-3\">Género</th>\n                  <th className=\"py-2 px-3\">Creado</th>\n                  <th className=\"py-2 pl-3\"></th>\n                </tr>\n              </thead>\n              <tbody>\n                {!result || loading ? (\n                  <tr>\n                    <td colSpan={5} className=\"py-6 text-[var(--color-brand-bluegray)]\">\n                      Cargando…\n                    </td>\n                  </tr>\n                ) : result.rows.length === 0 ? (\n                  <tr>\n                    <td colSpan={5} className=\"py-6 text-[var(--color-brand-bluegray)]\">\n                      Sin resultados.\n                    </td>\n                  </tr>\n                ) : (\n                  result.rows.map((p) => (\n                    <tr\n                      key={p.id}\n                      className=\"border-b border-[var(--color-brand-border)] hover:bg-[var(--color-brand-background)]/50\"\n                    >\n                      <td className=\"py-2 pr-3 text-[var(--color-brand-text)]\">{p.nombre}</td>\n                      <td className=\"py-2 px-3\">{p.edad}</td>\n                      <td className=\"py-2 px-3\">{p.genero}</td>\n                      <td className=\"py-2 px-3\">{new Date(p.created_at).toLocaleString()}</td>\n                      <td className=\"py-2 pl-3\">\n                        <Link\n                          href={`/pacientes/${p.id}`}\n                          className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)]\"\n                        >\n                          Ver <ColorEmoji token=\"siguiente\" size={14} />\n                        </Link>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Paginación */}\n          <div className=\"mt-4 flex items-center justify-between\">\n            <div className=\"text-sm text-[var(--color-brand-bluegray)]\">\n              Mostrando{\" \"}\n              {result && result.rows.length > 0 ? (result.page - 1) * result.pageSize + 1 : 0}\n              {\" – \"}\n              {result && result.rows.length > 0\n                ? (result.page - 1) * result.pageSize + result.rows.length\n                : 0}\n              {\" de \"}\n              {result?.count ?? 0}\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                disabled={loading || (result?.page ?? 1) <= 1}\n                onClick={() => doSearch((result?.page ?? 1) - 1)}\n              >\n                <ColorEmoji token=\"anterior\" size={14} /> Anterior\n              </button>\n              <button\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                disabled={loading || (result?.page ?? 1) >= totalPages}\n                onClick={() => doSearch((result?.page ?? 1) + 1)}\n              >\n                Siguiente <ColorEmoji token=\"siguiente\" size={14} />\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/perfil/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1198, 1201], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1198, 1201], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1261, 1264], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1261, 1264], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 144,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 144,
        "endColumn": 86,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClient, User } from \"@supabase/supabase-js\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { useToast } from \"@/components/Toast\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport default function PerfilPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [avatarPath, setAvatarPath] = useState<string | null>(null);\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await supabase.auth.getUser();\n      const u = data.user;\n      if (!u) {\n        router.push(\"/login\");\n        return;\n      }\n      setUser(u);\n      setEmail(u.email ?? \"\");\n      setName((u.user_metadata as any)?.full_name ?? \"\");\n      const path = (u.user_metadata as any)?.avatar_path ?? null;\n      setAvatarPath(path);\n      if (path) {\n        const { data: signed } = await supabase.storage\n          .from(\"uploads\")\n          .createSignedUrl(path, 60 * 60);\n        setAvatarUrl(signed?.signedUrl ?? null);\n      }\n      setLoading(false);\n    })();\n  }, [router]);\n\n  async function refreshSignedUrl(path: string | null) {\n    if (!path) {\n      setAvatarUrl(null);\n      return;\n    }\n    const { data } = await supabase.storage.from(\"uploads\").createSignedUrl(path, 60 * 60);\n    setAvatarUrl(data?.signedUrl ?? null);\n  }\n\n  async function handleSave(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n    setSaving(true);\n    const { error } = await supabase.auth.updateUser({\n      data: { full_name: name, avatar_path: avatarPath ?? null },\n    });\n    setSaving(false);\n    if (error) {\n      toast({ variant: \"error\", title: \"No se pudo guardar\", description: error.message });\n      return;\n    }\n    toast({ variant: \"success\", title: \"Perfil actualizado\" });\n  }\n\n  function triggerPick() {\n    fileRef.current?.click();\n  }\n\n  async function onPick(e: React.ChangeEvent<HTMLInputElement>) {\n    const f = e.target.files?.[0];\n    if (!f || !user) return;\n\n    if (!f.type.startsWith(\"image/\")) {\n      toast({\n        variant: \"error\",\n        title: \"Archivo no válido\",\n        description: \"Sube una imagen (PNG/JPG/WebP…)\",\n      });\n      e.target.value = \"\";\n      return;\n    }\n    if (f.size > 5 * 1024 * 1024) {\n      toast({ variant: \"error\", title: \"Imagen muy pesada\", description: \"Máx. 5 MB\" });\n      e.target.value = \"\";\n      return;\n    }\n\n    const ext = f.name.split(\".\").pop()?.toLowerCase() || \"png\";\n    const path = `avatars/${user.id}_${Date.now()}.${ext}`.replace(/\\s+/g, \"_\");\n\n    const { error } = await supabase.storage.from(\"uploads\").upload(path, f, {\n      upsert: false,\n    });\n    if (error) {\n      toast({ variant: \"error\", title: \"No se pudo subir el avatar\", description: error.message });\n      e.target.value = \"\";\n      return;\n    }\n\n    setAvatarPath(path);\n    await refreshSignedUrl(path);\n\n    // Guarda inmediatamente en metadata para que quede persistente\n    await supabase.auth.updateUser({ data: { full_name: name, avatar_path: path } });\n\n    toast({ variant: \"success\", title: \"Avatar actualizado\" });\n    e.target.value = \"\";\n  }\n\n  async function removeAvatar() {\n    if (!avatarPath) return setAvatarUrl(null);\n    const ok = window.confirm(\"¿Quitar avatar?\");\n    if (!ok) return;\n\n    // Intenta borrar el archivo (si falla, igual limpiamos metadata)\n    await supabase.storage.from(\"uploads\").remove([avatarPath]);\n\n    setAvatarPath(null);\n    setAvatarUrl(null);\n    await supabase.auth.updateUser({ data: { full_name: name, avatar_path: null } });\n    toast({ variant: \"success\", title: \"Avatar quitado\" });\n  }\n\n  async function signOut() {\n    await supabase.auth.signOut();\n    router.push(\"/login\");\n  }\n\n  const AvatarVisual = useMemo(() => {\n    return (\n      <div className=\"size-28 rounded-full overflow-hidden border border-[var(--color-brand-border)] bg-[var(--color-brand-background)] flex items-center justify-center\">\n        {avatarUrl ? (\n          // eslint-disable-next-line @next/next/no-img-element\n          <img src={avatarUrl} alt=\"Avatar\" className=\"w-full h-full object-cover\" />\n        ) : (\n          <div className=\"text-4xl\">\n            <ColorEmoji token=\"usuario\" size={40} />\n          </div>\n        )}\n      </div>\n    );\n  }, [avatarUrl]);\n\n  if (loading) {\n    return (\n      <main className=\"p-6 md:p-10\">\n        <div className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] p-8 animate-pulse\">\n          <div className=\"h-7 w-48 bg-[var(--color-brand-background)] rounded mb-4\" />\n          <div className=\"h-5 w-80 bg-[var(--color-brand-background)] rounded\" />\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-8\">\n      {/* Encabezado */}\n      <header>\n        <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight flex items-center gap-3\">\n          <ColorEmoji token=\"usuario\" size={30} />\n          Perfil\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Actualiza tu información básica y tu avatar.\n        </p>\n      </header>\n\n      {/* Card principal */}\n      <section\n        className=\"\n          w-full rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n          shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-6 md:px-8 py-7\n        \"\n      >\n        <form onSubmit={handleSave} className=\"grid grid-cols-1 md:grid-cols-[auto,1fr] gap-6\">\n          {/* Columna avatar */}\n          <div className=\"flex flex-col items-start gap-4\">\n            {AvatarVisual}\n            <div className=\"flex gap-2\">\n              <button\n                type=\"button\"\n                onClick={triggerPick}\n                className=\"inline-flex items-center gap-2 rounded-xl px-3 py-2 text-sm bg-[var(--color-brand-primary)] text-white hover:brightness-95\"\n              >\n                <ColorEmoji token=\"imagen\" />\n                Subir avatar\n              </button>\n              <button\n                type=\"button\"\n                onClick={removeAvatar}\n                className=\"inline-flex items-center gap-2 rounded-xl px-3 py-2 text-sm bg-white border border-[var(--color-brand-border)] hover:brightness-95\"\n              >\n                <ColorEmoji token=\"limpiar\" />\n                Quitar\n              </button>\n            </div>\n            <input\n              ref={fileRef}\n              type=\"file\"\n              accept=\"image/*\"\n              className=\"hidden\"\n              onChange={onPick}\n            />\n          </div>\n\n          {/* Columna formulario */}\n          <div className=\"space-y-5\">\n            {/* Correo (solo lectura) */}\n            <div>\n              <label className=\"block text-sm text-[var(--color-brand-bluegray)] mb-1\">\n                Correo\n              </label>\n              <input\n                value={email}\n                readOnly\n                className=\"\n                  w-full rounded-2xl border border-[var(--color-brand-border)]\n                  bg-[color-mix(in_oklab,#fff_92%,var(--color-brand-background)_8%)]\n                  px-5 py-3 text-[var(--color-brand-text)]\n                \"\n              />\n            </div>\n\n            {/* Nombre para mostrar */}\n            <div>\n              <label className=\"block text-sm text-[var(--color-brand-bluegray)] mb-1\">\n                Nombre para mostrar\n              </label>\n              <input\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Tu nombre\"\n                className=\"\n                  w-full rounded-2xl border border-[var(--color-brand-border)]\n                  bg-white px-5 py-3 text-[var(--color-brand-text)]\n                  focus:outline-none focus:ring-2 focus:ring-[var(--color-brand-primary)]\n                \"\n              />\n            </div>\n\n            <div className=\"flex flex-wrap gap-3 pt-2\">\n              <button\n                type=\"submit\"\n                disabled={saving}\n                className=\"inline-flex items-center gap-2 rounded-2xl px-5 py-3 bg-[var(--color-brand-primary)] text-white hover:brightness-95 disabled:opacity-60\"\n              >\n                <ColorEmoji token=\"guardar\" />\n                Guardar cambios\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={signOut}\n                className=\"inline-flex items-center gap-2 rounded-2xl px-5 py-3 bg-white border border-[var(--color-brand-border)] hover:brightness-95\"\n              >\n                <ColorEmoji token=\"salir\" />\n                Cerrar sesión\n              </button>\n            </div>\n          </div>\n        </form>\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/test-ui/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1296, 1299], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1296, 1299], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { createClient } from \"@supabase/supabase-js\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype FileRow = {\n  name: string;\n  id?: string | null;\n  updated_at?: string | null;\n  created_at?: string | null;\n  metadata?: {\n    size?: number;\n    mimetype?: string;\n    cacheControl?: string;\n    lastModified?: string;\n    contentLength?: number;\n  } | null;\n};\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport default function MisArchivosPage() {\n  const [files, setFiles] = useState<FileRow[] | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [busyName, setBusyName] = useState<string | null>(null);\n  const [msg, setMsg] = useState<string | null>(null);\n\n  const bucket = \"uploads\";\n\n  async function loadFiles() {\n    setLoading(true);\n    setMsg(null);\n\n    // Importante: listará sólo lo que las RLS permitan (dueño).\n    const { data, error } = await supabase.storage.from(bucket).list(\"\", {\n      limit: 1000,\n      sortBy: { column: \"updated_at\", order: \"desc\" },\n    });\n\n    setLoading(false);\n    if (error) {\n      setMsg(error.message);\n      setFiles([]);\n      return;\n    }\n    setFiles(data as any);\n  }\n\n  useEffect(() => {\n    loadFiles();\n  }, []);\n\n  function fmtBytes(n?: number) {\n    if (!n && n !== 0) return \"—\";\n    if (n < 1024) return `${n} B`;\n    const kb = n / 1024;\n    if (kb < 1024) return `${kb.toFixed(1)} KB`;\n    const mb = kb / 1024;\n    if (mb < 1024) return `${mb.toFixed(1)} MB`;\n    const gb = mb / 1024;\n    return `${gb.toFixed(1)} GB`;\n  }\n\n  async function handleView(name: string) {\n    setBusyName(name);\n    setMsg(null);\n    try {\n      // Descarga a blob (válido para privado) y abre en nueva pestaña\n      const { data, error } = await supabase.storage.from(bucket).download(name);\n      if (error) throw error;\n      const blobUrl = URL.createObjectURL(data);\n      window.open(blobUrl, \"_blank\", \"noopener,noreferrer\");\n      // Limpieza diferida del blob URL\n      setTimeout(() => URL.revokeObjectURL(blobUrl), 60_000);\n    } catch (e: unknown) {\n      setMsg(e?.message ?? \"No se pudo abrir el archivo\");\n    } finally {\n      setBusyName(null);\n    }\n  }\n\n  async function handleDownload(name: string) {\n    setBusyName(name);\n    setMsg(null);\n    try {\n      const { data, error } = await supabase.storage.from(bucket).download(name);\n      if (error) throw error;\n      const url = URL.createObjectURL(data);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = name.split(\"/\").pop() || name;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      setTimeout(() => URL.revokeObjectURL(url), 60_000);\n    } catch (e: unknown) {\n      setMsg(e?.message ?? \"No se pudo descargar\");\n    } finally {\n      setBusyName(null);\n    }\n  }\n\n  async function handleCopyLink(name: string) {\n    setBusyName(name);\n    setMsg(null);\n    try {\n      // URL firmada 10 minutos (600 s)\n      const { data, error } = await supabase.storage.from(bucket).createSignedUrl(name, 600);\n      if (error) throw error;\n      await navigator.clipboard.writeText(data.signedUrl);\n      setMsg(\"🔗 Enlace copiado (válido por 10 minutos).\");\n    } catch (e: unknown) {\n      setMsg(e?.message ?? \"No se pudo copiar el enlace\");\n    } finally {\n      setBusyName(null);\n    }\n  }\n\n  async function handleDelete(name: string) {\n    if (!confirm(\"¿Eliminar este archivo? Esta acción no se puede deshacer.\")) {\n      return;\n    }\n    setBusyName(name);\n    setMsg(null);\n    try {\n      const { error } = await supabase.storage.from(bucket).remove([name]);\n      if (error) throw error;\n      // Actualizamos localmente\n      setFiles((prev) => (prev || []).filter((f) => f.name !== name));\n      setMsg(\"🗑️ Archivo eliminado.\");\n    } catch (e: unknown) {\n      setMsg(e?.message ?? \"No se pudo eliminar\");\n    } finally {\n      setBusyName(null);\n    }\n  }\n\n  const isEmpty = useMemo(() => (files?.length ?? 0) === 0, [files]);\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-8\">\n      {/* Encabezado */}\n      <header className=\"flex items-start justify-between gap-4\">\n        <div className=\"space-y-2\">\n          <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight flex items-center gap-3\">\n            <ColorEmoji token=\"carpeta\" size={30} />\n            Mis archivos\n          </h1>\n          <p className=\"text-[var(--color-brand-bluegray)]\">\n            Administra, visualiza y comparte tus documentos.\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-2\">\n          <a\n            href=\"/test-ui/upload\"\n            className=\"\n              inline-flex items-center gap-2 rounded-2xl px-4 py-3\n              bg-[var(--color-brand-primary)] text-white\n              hover:brightness-95 active:brightness-90 transition shadow-sm\n            \"\n          >\n            <ColorEmoji token=\"subir\" size={18} />\n            Subir archivo\n          </a>\n          <button\n            onClick={loadFiles}\n            disabled={loading}\n            className=\"\n              inline-flex items-center gap-2 rounded-2xl px-4 py-3\n              bg-white text-[var(--color-brand-text)]\n              border border-[var(--color-brand-border)]\n              hover:bg-[color-mix(in_oklab,white_90%,var(--color-brand-background)_10%)]\n              transition\n              disabled:opacity-60 disabled:cursor-not-allowed\n            \"\n            title=\"Actualizar lista\"\n          >\n            <ColorEmoji token=\"actualizar\" size={18} />\n            Actualizar lista\n          </button>\n        </div>\n      </header>\n\n      {/* Mensajes */}\n      {msg && (\n        <div\n          className=\"\n          rounded-2xl bg-white/95 border border-[var(--color-brand-border)]\n          shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-5 py-4 text-[var(--color-brand-text)]\n        \"\n        >\n          {msg}\n        </div>\n      )}\n\n      {/* Estado cargando */}\n      {loading && (\n        <div\n          className=\"\n          rounded-3xl bg-white/90 border border-[var(--color-brand-border)]\n          shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-6 py-6\n        \"\n        >\n          <p className=\"text-[var(--color-brand-text)] flex items-center gap-2\">\n            <ColorEmoji token=\"info\" size={18} /> Cargando…\n          </p>\n        </div>\n      )}\n\n      {/* Estado vacío */}\n      {files && isEmpty && !loading && (\n        <div\n          className=\"\n            rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n            shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\n          \"\n        >\n          <div className=\"p-7 flex items-start gap-4\">\n            <div className=\"rounded-2xl p-4 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n              <ColorEmoji token=\"nube\" size={28} />\n            </div>\n            <div className=\"flex-1\">\n              <h3 className=\"text-xl font-semibold text-[var(--color-brand-text)]\">\n                Aún no tienes archivos\n              </h3>\n              <p className=\"text-[var(--color-brand-bluegray)] mt-1\">\n                Sube tu primer documento para comenzar.\n              </p>\n              <div className=\"mt-4\">\n                <a\n                  href=\"/test-ui/upload\"\n                  className=\"\n                    inline-flex items-center gap-2 rounded-2xl px-4 py-3\n                    bg-[var(--color-brand-primary)] text-white\n                    hover:brightness-95 active:brightness-90 transition shadow-sm\n                  \"\n                >\n                  <ColorEmoji token=\"subir\" size={18} />\n                  Subir archivo\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Lista */}\n      {files && !isEmpty && !loading && (\n        <section className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n          {files.map((f) => {\n            const size = f.metadata?.size ?? (f.metadata?.contentLength as number | undefined);\n            const shortName = f.name.split(\"/\").pop() || f.name;\n\n            return (\n              <div\n                key={f.name}\n                className=\"\n                  group rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n                  shadow-[0_10px_30px_rgba(0,0,0,0.06)] hover:shadow-[0_14px_38px_rgba(0,0,0,0.08)]\n                  transition overflow-hidden\n                \"\n              >\n                <div className=\"p-6 flex items-start gap-4\">\n                  <div className=\"rounded-2xl p-4 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                    <ColorEmoji token=\"archivo\" size={28} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"text-[var(--color-brand-text)] font-semibold truncate\">\n                      {shortName}\n                    </h3>\n                    <p className=\"text-sm text-[var(--color-brand-bluegray)] mt-1\">\n                      {fmtBytes(size)} ·{\" \"}\n                      {f.updated_at ? new Date(f.updated_at).toLocaleString() : \"—\"}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"h-px bg-[var(--color-brand-border)] mx-6\" />\n\n                <div className=\"p-5 flex flex-wrap gap-2\">\n                  <button\n                    onClick={() => handleView(f.name)}\n                    disabled={busyName === f.name}\n                    className=\"\n                      inline-flex items-center gap-2 rounded-xl px-4 py-2\n                      bg-white text-[var(--color-brand-text)]\n                      border border-[var(--color-brand-border)]\n                      hover:bg-[color-mix(in_oklab,white_90%,var(--color-brand-background)_10%)]\n                      transition disabled:opacity-60\n                    \"\n                    title=\"Ver\"\n                  >\n                    <ColorEmoji token=\"ver\" size={18} /> Ver\n                  </button>\n\n                  <button\n                    onClick={() => handleDownload(f.name)}\n                    disabled={busyName === f.name}\n                    className=\"\n                      inline-flex items-center gap-2 rounded-xl px-4 py-2\n                      bg-white text-[var(--color-brand-text)]\n                      border border-[var(--color-brand-border)]\n                      hover:bg-[color-mix(in_oklab,white_90%,var(--color-brand-background)_10%)]\n                      transition disabled:opacity-60\n                    \"\n                    title=\"Descargar\"\n                  >\n                    <ColorEmoji token=\"descargar\" size={18} /> Descargar\n                  </button>\n\n                  <button\n                    onClick={() => handleCopyLink(f.name)}\n                    disabled={busyName === f.name}\n                    className=\"\n                      inline-flex items-center gap-2 rounded-xl px-4 py-2\n                      bg-white text-[var(--color-brand-text)]\n                      border border-[var(--color-brand-border)]\n                      hover:bg-[color-mix(in_oklab,white_90%,var(--color-brand-background)_10%)]\n                      transition disabled:opacity-60\n                    \"\n                    title=\"Copiar enlace\"\n                  >\n                    <ColorEmoji token=\"copiar\" size={18} /> Copiar enlace\n                  </button>\n\n                  <button\n                    onClick={() => handleDelete(f.name)}\n                    disabled={busyName === f.name}\n                    className=\"\n                      inline-flex items-center gap-2 rounded-xl px-4 py-2\n                      bg-[var(--color-brand-primary)] text-white\n                      hover:brightness-95 active:brightness-90\n                      transition disabled:opacity-60\n                    \"\n                    title=\"Eliminar\"\n                  >\n                    <ColorEmoji token=\"borrar\" size={18} /> Eliminar\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </section>\n      )}\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(app)/test-ui/upload/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useMemo' is defined but never used.",
        "line": 3,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [481, 484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [481, 484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refreshList'. Either include it or remove the dependency array.",
        "line": 71,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 71,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [refreshList]",
            "fix": { "range": [1922, 1924], "text": "[refreshList]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport UploadHint from \"@/components/UploadHint\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport { showToast } from \"@/components/Toaster\";\nimport { getSignedUrl } from \"@/lib/storage\";\n\ntype Obj = {\n  id?: string;\n  name: string;\n  updated_at?: string;\n  created_at?: string;\n  last_accessed_at?: string;\n  metadata?: Record<string, any>;\n};\n\nconst BUCKET = \"uploads\";\n\nexport default function UploadDemoPage() {\n  const supabase = getSupabaseBrowser();\n  const [files, setFiles] = useState<Obj[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const hasFiles = files.length > 0;\n\n  const prettyDate = (iso?: string) => {\n    if (!iso) return \"—\";\n    try {\n      const d = new Date(iso);\n      return d.toLocaleString();\n    } catch {\n      return iso;\n    }\n  };\n\n  async function refreshList() {\n    setLoading(true);\n    try {\n      // Listamos en raíz. RLS ya limita a objetos owner = auth.uid()\n      const { data, error } = await supabase.storage.from(BUCKET).list(\"\", {\n        limit: 1000,\n        offset: 0,\n        sortBy: { column: \"created_at\", order: \"desc\" as const },\n      });\n      if (error) throw error;\n      setFiles(data || []);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo obtener la lista.\", \"error\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    refreshList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function onUpload(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const file = inputRef.current?.files?.[0];\n    if (!file) {\n      showToast(\"Elige un archivo primero.\", \"info\");\n      return;\n    }\n    setUploading(true);\n    try {\n      // Nombre con timestamp para evitar colisiones\n      const path = `${Date.now()}-${file.name}`;\n      const { error } = await supabase.storage.from(BUCKET).upload(path, file, {\n        cacheControl: \"3600\",\n        contentType: file.type || \"application/octet-stream\",\n        upsert: false,\n      });\n      if (error) throw error;\n      showToast(\"Archivo subido.\", \"success\");\n      inputRef.current!.value = \"\";\n      await refreshList();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo subir el archivo.\", \"error\");\n    } finally {\n      setUploading(false);\n    }\n  }\n\n  async function onCopyLink(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300); // 5 minutos\n      await navigator.clipboard.writeText(url);\n      showToast(\"Enlace temporal copiado (5 min).\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo generar el enlace.\", \"error\");\n    }\n  }\n\n  async function onView(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300);\n      window.open(url, \"_blank\", \"noopener,noreferrer\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo abrir el archivo.\", \"error\");\n    }\n  }\n\n  async function onDownload(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = obj.name;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo descargar.\", \"error\");\n    }\n  }\n\n  async function onDelete(obj: Obj) {\n    if (!confirm(`¿Eliminar \"${obj.name}\"?`)) return;\n    try {\n      const { error } = await supabase.storage.from(BUCKET).remove([obj.name]);\n      if (error) throw error;\n      showToast(\"Archivo eliminado.\", \"success\");\n      await refreshList();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo eliminar.\", \"error\");\n    }\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-8\">\n      {/* Encabezado */}\n      <header className=\"space-y-2\">\n        <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight flex items-center gap-3\">\n          <ColorEmoji token=\"documentos\" size={28} />\n          Subir & Gestionar archivos\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Bucket privado{\" \"}\n          <code className=\"rounded bg-[var(--color-brand-background)] px-1\">uploads</code> (RLS por\n          dueño).\n        </p>\n      </header>\n\n      {/* Uploader */}\n      <section\n        className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n                   shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\"\n      >\n        <div className=\"p-6 flex flex-col gap-4 sm:flex-row sm:items-end\">\n          <label className=\"flex-1 space-y-2\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80 flex items-center gap-2\">\n              <ColorEmoji token=\"subirBandeja\" size={18} /> Archivo\n            </span>\n            <input\n              ref={inputRef}\n              type=\"file\"\n              className=\"block w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            />\n          </label>\n          <button onClick={() => inputRef.current?.click()} className=\"hidden\" />\n          <form onSubmit={onUpload}>\n            <UploadHint />\n            <button\n              disabled={uploading}\n              className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"subir\" size={18} />\n              {uploading ? \"Subiendo…\" : \"Subir\"}\n            </button>\n          </form>\n          <button\n            onClick={refreshList}\n            disabled={loading}\n            className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] flex items-center gap-2\"\n          >\n            <ColorEmoji token=\"refrescar\" size={18} />\n            {loading ? \"Actualizando…\" : \"Actualizar lista\"}\n          </button>\n        </div>\n      </section>\n\n      {/* Lista */}\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {!hasFiles && !loading && (\n          <div className=\"col-span-full rounded-2xl border border-[var(--color-brand-border)] bg-white p-6 text-[var(--color-brand-bluegray)]\">\n            No hay archivos aún.\n          </div>\n        )}\n\n        {files.map((obj) => (\n          <article\n            key={obj.name}\n            className=\"group rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n                       shadow-[0_10px_30px_rgba(0,0,0,0.06)] hover:shadow-[0_14px_38px_rgba(0,0,0,0.08)]\n                       transition overflow-hidden\"\n          >\n            <div className=\"p-6 flex items-start gap-4\">\n              <div className=\"rounded-2xl p-4 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                <ColorEmoji token=\"archivo\" size={24} />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-medium text-[var(--color-brand-text)] truncate\">{obj.name}</h3>\n                <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n                  Actualizado: {prettyDate(obj.updated_at || obj.created_at)}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"h-px bg-[var(--color-brand-border)] mx-6\" />\n\n            <div className=\"p-4 grid grid-cols-2 gap-3 sm:grid-cols-4\">\n              <button\n                onClick={() => onView(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n              >\n                <ColorEmoji token=\"ver\" size={16} /> Ver\n              </button>\n              <button\n                onClick={() => onDownload(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n              >\n                <ColorEmoji token=\"descargar\" size={16} /> Descargar\n              </button>\n              <button\n                onClick={() => onCopyLink(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n                title=\"Signed URL (5 min)\"\n              >\n                <ColorEmoji token=\"enlace\" size={16} /> Copiar enlace\n              </button>\n              <button\n                onClick={() => onDelete(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-red-50 flex items-center justify-center gap-2 text-sm text-red-600\"\n              >\n                <ColorEmoji token=\"borrar\" size={16} /> Borrar\n              </button>\n            </div>\n          </article>\n        ))}\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(auth)/login/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(auth)/register/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'data' is assigned a value but never used.",
        "line": 24,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function RegisterPage() {\n  const [email, setEmail] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [msg, setMsg] = useState<string | null>(null);\n  const router = useRouter();\n\n  async function handleRegister(e: React.FormEvent) {\n    e.preventDefault();\n    setLoading(true);\n    setMsg(null);\n    try {\n      const supabase = getSupabaseBrowser();\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password: pass,\n      });\n      if (error) {\n        setMsg(error.message);\n      } else {\n        // Si \"Confirm email\" está desactivado, tendrás sesión inmediata.\n        setMsg(\"Cuenta creada. Redirigiendo al dashboard...\");\n        router.replace(\"/dashboard\");\n      }\n    } catch (err: unknown) {\n      setMsg(err?.message ?? \"Error de configuración de Supabase.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <main className=\"min-h-screen flex items-center justify-center p-6\">\n      <Card className=\"w-full max-w-md border-brand-border bg-white/70\">\n        <CardHeader>\n          <CardTitle className=\"font-heading text-brand-primary\">Crear cuenta</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleRegister} className=\"space-y-4\">\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"email\">Correo</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"tu@correo.com\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n                autoComplete=\"email\"\n              />\n            </div>\n            <div className=\"grid gap-2\">\n              <Label htmlFor=\"password\">Contraseña</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"********\"\n                minLength={8}\n                value={pass}\n                onChange={(e) => setPass(e.target.value)}\n                required\n                autoComplete=\"new-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              disabled={loading}\n              className=\"w-full bg-brand-primary text-white hover:opacity-90\"\n            >\n              {loading ? \"Creando...\" : \"Crear cuenta\"}\n            </Button>\n            {msg && <p className=\"text-sm mt-2\">{msg}</p>}\n            <p className=\"text-sm mt-3\">\n              ¿Ya tienes cuenta?{\" \"}\n              <a href=\"/login\" className=\"underline text-brand-primary\">\n                Inicia sesión\n              </a>\n            </p>\n          </form>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(auth)/reset-password/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/(auth)/update-password/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'search' and 'supabase.auth'. Either include them or remove the dependency array.",
        "line": 70,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 70,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [search, supabase.auth]",
            "fix": { "range": [2470, 2472], "text": "[search, supabase.auth]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/acerca/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/api/sentry-debug/route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/head.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/instalar/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [125, 128], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [125, 128], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [558, 561], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [558, 561], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1094, 1097], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1094, 1097], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype BPEvent = any;\n\nexport default function InstalarPage() {\n  const [promptEvt, setPromptEvt] = useState<BPEvent | null>(null);\n  const [choice, setChoice] = useState<string | null>(null);\n  const [isStandalone, setStandalone] = useState(false);\n  const [ua, setUa] = useState({\n    ios: false,\n    android: false,\n    desktop: false,\n    chrome: false,\n    safari: false,\n    edge: false,\n  });\n\n  useEffect(() => {\n    const nav = navigator as any;\n    const standalone =\n      window.matchMedia?.(\"(display-mode: standalone)\").matches || nav.standalone === true;\n    setStandalone(standalone);\n\n    const u = navigator.userAgent.toLowerCase();\n    const ios = /iphone|ipad|ipod/.test(u);\n    const android = /android/.test(u);\n    const edge = /edg\\//.test(u);\n    const chrome = /chrome\\//.test(u) && !edge;\n    const safari = ios || (/safari/.test(u) && !chrome && !edge);\n    setUa({ ios, android, desktop: !(ios || android), chrome, safari, edge });\n\n    const handler = (e: any) => {\n      e.preventDefault();\n      setPromptEvt(e);\n    };\n    window.addEventListener(\"beforeinstallprompt\", handler);\n    return () => window.removeEventListener(\"beforeinstallprompt\", handler);\n  }, []);\n\n  async function onInstallNow() {\n    if (!promptEvt) return;\n    promptEvt.prompt();\n    const { outcome } = await promptEvt.userChoice.catch(() => ({ outcome: \"dismissed\" }));\n    setChoice(outcome);\n    setPromptEvt(null);\n  }\n\n  return (\n    <main className=\"min-h-[100dvh] grid place-items-center p-4\">\n      <section className=\"w-full max-w-3xl space-y-6\">\n        {/* Hero */}\n        <div className=\"rounded-3xl border border-[var(--color-brand-border)] bg-white/95 p-6 md:p-8 shadow\">\n          <div className=\"flex items-start gap-4\">\n            <div className=\"rounded-2xl border border-[var(--color-brand-border)] bg-[var(--color-brand-background)] p-4\">\n              <ColorEmoji token=\"instalar\" size={28} />\n            </div>\n            <div className=\"flex-1\">\n              <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight\">\n                Instalar Sanoa\n              </h1>\n              <p className=\"mt-1 text-[var(--color-brand-bluegray)]\">\n                Acceso desde tu pantalla de inicio, pantalla completa y uso offline básico.\n              </p>\n\n              <div className=\"mt-4 flex flex-wrap items-center gap-2\">\n                {isStandalone ? (\n                  <span className=\"inline-flex items-center gap-2 rounded-full border border-emerald-300 bg-emerald-50 px-3 py-1 text-sm text-emerald-700\">\n                    <ColorEmoji token=\"ok\" size={16} /> Ya instalada\n                  </span>\n                ) : promptEvt ? (\n                  <button\n                    onClick={onInstallNow}\n                    className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90\"\n                  >\n                    Instalar ahora\n                  </button>\n                ) : (\n                  <span className=\"inline-flex items-center gap-2 rounded-full border border-[var(--color-brand-border)] px-3 py-1 text-sm\">\n                    <ColorEmoji token=\"info\" size={16} /> Sigue los pasos según tu dispositivo\n                  </span>\n                )}\n\n                {choice && (\n                  <span className=\"inline-flex items-center gap-2 rounded-full border border-[var(--color-brand-border)] bg-white px-3 py-1 text-sm\">\n                    Resultado: {choice === \"accepted\" ? \"aceptado\" : \"descartado\"}\n                  </span>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Guías por plataforma */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {/* iOS */}\n          <article className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-5 shadow-sm\">\n            <h2 className=\"font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"ios\" size={18} /> iOS (Safari)\n            </h2>\n            <ol className=\"mt-3 list-decimal pl-5 text-sm text-[var(--color-brand-text)]/80 space-y-1.5\">\n              <li>\n                Abre esta página en <strong>Safari</strong>.\n              </li>\n              <li>\n                Toca <strong>Compartir</strong> <span aria-hidden>⬆️</span> en la barra.\n              </li>\n              <li>\n                Elige <strong>Añadir a pantalla de inicio</strong>.\n              </li>\n              <li>\n                Confirma con <strong>Añadir</strong>.\n              </li>\n            </ol>\n            {ua.ios ? (\n              <p className=\"mt-3 text-xs text-[var(--color-brand-bluegray)]\">Detectado iOS.</p>\n            ) : null}\n          </article>\n\n          {/* Android */}\n          <article className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-5 shadow-sm\">\n            <h2 className=\"font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"android\" size={18} /> Android (Chrome)\n            </h2>\n            <ol className=\"mt-3 list-decimal pl-5 text-sm text-[var(--color-brand-text)]/80 space-y-1.5\">\n              <li>\n                Toca el menú <strong>⋮</strong> de Chrome.\n              </li>\n              <li>\n                Selecciona <strong>Instalar app</strong> o{\" \"}\n                <strong>Añadir a pantalla de inicio</strong>.\n              </li>\n              <li>Confirma y acepta.</li>\n            </ol>\n            {ua.android ? (\n              <p className=\"mt-3 text-xs text-[var(--color-brand-bluegray)]\">Detectado Android.</p>\n            ) : null}\n          </article>\n\n          {/* Desktop */}\n          <article className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-5 shadow-sm\">\n            <h2 className=\"font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"escritorio\" size={18} /> Escritorio (Chrome/Edge)\n            </h2>\n            <ol className=\"mt-3 list-decimal pl-5 text-sm text-[var(--color-brand-text)]/80 space-y-1.5\">\n              <li>\n                Busca el botón <strong>Instalar</strong> en la barra de direcciones.\n              </li>\n              <li>\n                O en el menú del navegador, elige <strong>Instalar Sanoa</strong>.\n              </li>\n              <li>Confirma para abrirla en ventana propia.</li>\n            </ol>\n            {ua.desktop ? (\n              <p className=\"mt-3 text-xs text-[var(--color-brand-bluegray)]\">\n                Detectado escritorio.\n              </p>\n            ) : null}\n          </article>\n        </div>\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/layout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ThemeToggle' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SiteFooter' is defined but never used.",
        "line": 3,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Toaster' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import \"@/sentry.server.config\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\nimport SiteFooter from \"@/components/SiteFooter\";\nimport Toaster from \"@/components/Toaster\";\nimport type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport { Poppins, Lato } from \"next/font/google\";\nimport Providers from \"./providers\";\n\n/* Fuentes: expuestas como variables CSS */\nconst poppins = Poppins({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"600\", \"700\"],\n  variable: \"--font-poppins\",\n});\n\nconst lato = Lato({\n  subsets: [\"latin\"],\n  weight: [\"400\", \"700\"],\n  variable: \"--font-lato\",\n});\n\nexport const metadata: Metadata = {\n  title: \"Sanoa Lab\",\n  description: \"Ecosistema clínico modular — Sanoa Lab\",\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"es\">\n      <body\n        className={`${poppins.variable} ${lato.variable} font-body text-[var(--color-brand-text)] bg-[var(--color-brand-background)] min-h-dvh`}\n      >\n        <Providers>\n          {children}\n          {/* Contenedor del portal de toasts (presente en SSR, poblado en cliente) */}\n          <div id=\"toast-root\" />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/manifest.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/offline/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/privacidad/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/providers.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/robots.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/sitemap.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/app/terminos/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/AppShell.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/AuthGate.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'router' and 'supabase.auth'. Either include them or remove the dependency array.",
        "line": 44,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 44,
        "endColumn": 16,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [pathname, router, supabase.auth]",
            "fix": { "range": [1401, 1411], "text": "[pathname, router, supabase.auth]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ColorEmoji.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "prefer-const",
        "severity": 2,
        "message": "'l' is never reassigned. Use 'const' instead.",
        "line": 27,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst",
        "endLine": 27,
        "endColumn": 6,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render.",
        "line": 138,
        "column": 16,
        "nodeType": "Identifier",
        "endLine": 138,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.",
        "line": 140,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 140,
        "endColumn": 12,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 170,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 170,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5206, 5209], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5206, 5209], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/Emoji.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [428, 431], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [428, 431], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport ColorEmoji from \"./ColorEmoji\";\nimport { emojiTheme, getEmojiChar, getEmojiSettings, EmojiTokenName } from \"@/config/emojiTheme\";\n\ntype Props =\n  | { name: EmojiTokenName; size?: number; className?: string; title?: string }\n  | { name: string; size?: number; className?: string; title?: string };\n\nexport default function Emoji(props: Props) {\n  const { name, size = 22, className = \"\", title } = props as any;\n  const char = getEmojiChar(name);\n  const settings = getEmojiSettings(char);\n\n  return (\n    <ColorEmoji\n      emoji={char}\n      size={size}\n      mode={settings.mode ?? emojiTheme.global.mode}\n      color={settings.color ?? emojiTheme.global.color}\n      accentColor={settings.accentColor ?? emojiTheme.global.accentColor}\n      className={className}\n      title={title}\n    />\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/EmojiTheme.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ExportPDFButton.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2366, 2369], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2366, 2369], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useState } from \"react\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype Props = {\n  targetRef?: React.RefObject<HTMLElement | HTMLDivElement | null>;\n  targetId?: string; // alternativa si no usas ref\n  filename?: string; // ej: \"Paciente-Juan Perez.pdf\"\n  className?: string;\n  label?: string; // texto del botón\n};\n\nexport default function ExportPDFButton({\n  targetRef,\n  targetId,\n  filename = \"export.pdf\",\n  className = \"\",\n  label = \"Exportar PDF\",\n}: Props) {\n  const [busy, setBusy] = useState(false);\n\n  async function handleExport() {\n    setBusy(true);\n    try {\n      const el =\n        targetRef?.current ||\n        (targetId ? (document.getElementById(targetId) as HTMLElement | null) : null);\n      if (!el) throw new Error(\"No se encontró el contenedor a exportar.\");\n\n      const html2canvas = (await import(\"html2canvas\")).default;\n      const { jsPDF } = await import(\"jspdf\");\n\n      // Renderizamos a canvas con buena resolución\n      const canvas = await html2canvas(el, {\n        backgroundColor: \"#ffffff\",\n        scale: Math.min(window.devicePixelRatio || 1.5, 2), // límite para peso\n        useCORS: true,\n        // ignora nodos marcados con data-html2canvas-ignore\n        ignoreElements: (node) =>\n          node instanceof HTMLElement && node.getAttribute(\"data-html2canvas-ignore\") === \"true\",\n      });\n\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\n      const pdfW = pdf.internal.pageSize.getWidth();\n      const pdfH = pdf.internal.pageSize.getHeight();\n\n      // Calculamos tamaño manteniendo proporción\n      const imgW = pdfW;\n      const imgH = (canvas.height * imgW) / canvas.width;\n\n      let heightLeft = imgH;\n      let position = 0;\n\n      pdf.addImage(imgData, \"PNG\", 0, position, imgW, imgH);\n      heightLeft -= pdfH;\n\n      while (heightLeft > 0) {\n        position = heightLeft - imgH;\n        pdf.addPage();\n        pdf.addImage(imgData, \"PNG\", 0, position, imgW, imgH);\n        heightLeft -= pdfH;\n      }\n\n      pdf.save(filename);\n    } catch (err) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      alert((err as any)?.message || \"No se pudo exportar el PDF.\");\n    } finally {\n      setBusy(false);\n    }\n  }\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleExport}\n      disabled={busy}\n      className={`inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] disabled:opacity-60 ${className}`}\n      title=\"Exportar a PDF\"\n    >\n      <ColorEmoji token=\"exportar\" size={16} />\n      {busy ? \"Exportando…\" : label}\n    </button>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/InstallPrompt.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [145, 148], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [145, 148], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [414, 417], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [414, 417], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function InstallPrompt() {\n  const [deferred, setDeferred] = useState<any>(null);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    // No mostrar si el usuario ya lo descartó\n    if (typeof window !== \"undefined\" && localStorage.getItem(\"pwaInstallDismissed\") === \"1\") {\n      return;\n    }\n    const handler = (e: any) => {\n      e.preventDefault();\n      setDeferred(e);\n      setVisible(true);\n    };\n    window.addEventListener(\"beforeinstallprompt\", handler);\n    return () => window.removeEventListener(\"beforeinstallprompt\", handler);\n  }, []);\n\n  async function onInstall() {\n    if (!deferred) return;\n    deferred.prompt();\n    await deferred.userChoice;\n    setDeferred(null);\n    setVisible(false);\n  }\n\n  function onLater() {\n    try {\n      localStorage.setItem(\"pwaInstallDismissed\", \"1\");\n    } catch {}\n    setVisible(false);\n  }\n\n  if (!visible) return null;\n\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 mx-auto w-full max-w-sm\">\n      <div className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-4 shadow\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"rounded-xl border border-[var(--color-brand-border)] bg-[var(--color-brand-background)] px-3 py-2\">\n            📲\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-[var(--color-brand-text)] font-medium\">Instala Sanoa</p>\n            <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n              Acceso más rápido, pantalla completa y uso offline básico.\n            </p>\n            <div className=\"mt-3 flex items-center gap-2\">\n              <button\n                onClick={onInstall}\n                className=\"rounded-md bg-[var(--color-brand-primary)] px-3 py-2 text-sm text-white hover:opacity-90\"\n              >\n                Instalar ahora\n              </button>\n              <button\n                onClick={onLater}\n                className=\"rounded-md border border-[var(--color-brand-border)] px-3 py-2 text-sm hover:bg-[var(--color-brand-background)]\"\n              >\n                Más tarde\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/Modal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/Navbar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/OfflineIndicator.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/OrgSwitcherBadge.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 18,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [715, 718], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [715, 718], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { listMyOrgs, getCurrentOrgId, setCurrentOrgId, type MyOrg } from \"@/lib/org\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { showToast } from \"@/components/Toaster\";\n\nexport default function OrgSwitcherBadge() {\n  const [orgs, setOrgs] = useState<MyOrg[]>([]);\n  const [current, setCurrent] = useState<string | null>(null);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const [list, cur] = await Promise.all([listMyOrgs(), getCurrentOrgId()]);\n        setOrgs(list);\n        setCurrent(cur);\n      } catch (e) {\n        // silencioso\n      }\n    })();\n\n    const onChanged = (e: any) => setCurrent(e.detail?.orgId || null);\n    window.addEventListener(\"sanoa:org-changed\", onChanged);\n    return () => window.removeEventListener(\"sanoa:org-changed\", onChanged);\n  }, []);\n\n  if (!current || orgs.length <= 1) return null;\n\n  const cur = orgs.find((o) => o.id === current);\n  const label = cur ? (cur.is_personal ? \"Personal\" : cur.name) : \"Organización\";\n\n  async function onChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const v = e.target.value;\n    setCurrent(v);\n    try {\n      await setCurrentOrgId(v);\n      showToast(\"Organización cambiada.\", \"success\");\n      // Opcional: refresca la página para que queries lean nueva org_id por triggers\n      // location.reload();\n    } catch (err: unknown) {\n      showToast(err?.message || \"No se pudo cambiar la organización.\", \"error\");\n    }\n    setOpen(false);\n  }\n\n  return (\n    <div className=\"fixed top-3 right-3 z-50 flex items-center gap-2\">\n      <div className=\"rounded-full border border-[var(--color-brand-border)] bg-white shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-3 py-1.5\">\n        <button\n          onClick={() => setOpen((v) => !v)}\n          className=\"inline-flex items-center gap-2 text-sm\"\n        >\n          <ColorEmoji token=\"laboratorio\" size={16} />\n          <span className=\"max-w-[180px] truncate\">{label}</span>\n          <span aria-hidden>▾</span>\n        </button>\n      </div>\n      {open && (\n        <div className=\"absolute mt-10 right-0 w-[260px] rounded-2xl border border-[var(--color-brand-border)] bg-white shadow-lg p-2\">\n          <select\n            value={current ?? \"\"}\n            onChange={onChange}\n            className=\"w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2 text-sm\"\n          >\n            {orgs.map((o) => (\n              <option key={o.id} value={o.id}>\n                {o.is_personal ? \"Personal\" : o.name} {o.role !== \"owner\" ? `· ${o.role}` : \"\"}\n              </option>\n            ))}\n          </select>\n          <div className=\"pt-2 text-[11px] text-[var(--color-brand-bluegray)]\">\n            Cambia para trabajar en otra organización.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/PendingQueueBadge.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [445, 448], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [445, 448], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function PendingQueueBadge() {\n  const [count, setCount] = useState<number>(0);\n\n  useEffect(() => {\n    const onCount = (e: Event) => {\n      const ce = e as CustomEvent<{ count: number }>;\n      setCount(ce.detail?.count ?? 0);\n    };\n    window.addEventListener(\"sanoa:queue-count\", onCount);\n    // Inicializa desde variable global si existe\n    setCount((window as any).__sanoaQueueCount || 0);\n    return () => window.removeEventListener(\"sanoa:queue-count\", onCount);\n  }, []);\n\n  if (count <= 0) return null;\n  return (\n    <div className=\"fixed bottom-16 right-3 z-50 rounded-full border border-[var(--color-brand-border)] bg-white shadow-[0_10px_30px_rgba(0,0,0,0.06)]\">\n      <div className=\"px-3 py-1.5 text-sm flex items-center gap-2\">\n        <span>📨</span>\n        <span className=\"font-medium text-[var(--color-brand-text)]\">{count}</span>\n        <span className=\"text-[var(--color-brand-bluegray)]\">pendiente(s)</span>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/QueueEvents.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/RegisterSW.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ':' expected.",
        "line": 42,
        "column": 87
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\n\nexport default function RegisterSW() {\n  const [updateReady, setUpdateReady] = useState(false);\n  const waitingSW = useRef<ServiceWorker | null>(null);\n\n  useEffect(() => {\n    if (!(\"serviceWorker\" in navigator)) return;\n    let reg: ServiceWorkerRegistration;\n\n    const onControllerChange = () => window.location.reload();\n\n    const registerNow = async () => {\n      try {\n        reg = await navigator.serviceWorker.register(\"/sw.js\");\n\n        // Limpieza ligera al arrancar (no bloqueante)\n        const sendCleanup = () => {\n          if (navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({ type: \"CLEANUP_RUNTIME\", limit: 200 });\n          }\n        };\n        setTimeout(sendCleanup, 3000);\n\n        if (reg.waiting) {\n          waitingSW.current = reg.waiting;\n          setUpdateReady(true);\n        }\n        reg.addEventListener(\"updatefound\", () => {\n          const sw = reg.installing;\n          if (!sw) return;\n          sw.addEventListener(\"statechange\", () => {\n            if (sw.state === \"installed\" && navigator.serviceWorker.controller) {\n              waitingSW.current = reg.waiting || sw;\n              setUpdateReady(true);\n            }\n          });\n        });\n        navigator.serviceWorker.addEventListener(\"controllerchange\", onControllerChange);\n      } catch (e) {\n        console.error((\"SW register error:\", e) instanceof Error ? \"SW register error:\", e : (()=>{ try { return JSON.stringify(\"SW register error:\", e); } catch { return String(\"SW register error:\", e); }})());\n      }\n    };\n\n    registerNow();\n    return () =>\n      navigator.serviceWorker.removeEventListener(\"controllerchange\", onControllerChange);\n  }, []);\n\n  const applyUpdate = () => {\n    try {\n      waitingSW.current?.postMessage({ type: \"SKIP_WAITING\" });\n    } catch (e) {\n      console.error((e) instanceof Error ? e : (()=>{ try { return JSON.stringify(e); } catch { return String(e); }})());\n      window.location.reload();\n    }\n  };\n\n  if (!updateReady) return null;\n\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 z-50 mx-auto w-full max-w-md\">\n      <div className=\"mx-4 rounded-2xl border border-[var(--color-brand-border)] bg-white shadow\">\n        <div className=\"flex items-center justify-between gap-3 p-3\">\n          <p className=\"text-sm text-[var(--color-brand-text)]\">Nueva versión disponible.</p>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => {\n                waitingSW.current = null;\n              }}\n              className=\"rounded-md border border-[var(--color-brand-border)] px-3 py-1.5 text-sm hover:bg-[var(--color-brand-background)]\"\n            >\n              Luego\n            </button>\n            <button\n              onClick={applyUpdate}\n              className=\"rounded-md bg-[var(--color-brand-primary)] px-3 py-1.5 text-sm text-white hover:opacity-90\"\n            >\n              Actualizar\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/RequireAuth.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/SiteFooter.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ThemeToggle.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/Toast.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1017, 1020], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1017, 1020], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'timers.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timers.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 56,
        "column": 28,
        "nodeType": "Identifier",
        "endLine": 56,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { createPortal } from \"react-dom\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype ToastVariant = \"success\" | \"error\" | \"info\" | \"warning\";\n\ntype ToastOptions = {\n  variant?: ToastVariant;\n  title?: string;\n  description?: string;\n  emoji?: string;\n  duration?: number; // ms (default 3500)\n};\n\ntype ToastItem = {\n  id: string;\n  opts: Required<ToastOptions>;\n};\n\ntype ToastContextValue = {\n  toast: (opts: ToastOptions) => void;\n};\n\nconst ToastContext = createContext<ToastContextValue | undefined>(undefined);\n\nexport function useToast() {\n  const ctx = useContext(ToastContext);\n  if (!ctx) {\n    throw new Error(\"useToast debe usarse dentro de <ToastProvider />\");\n  }\n  return ctx;\n}\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<ToastItem[]>([]);\n  const timers = useRef<Record<string, any>>({});\n  const [mounted, setMounted] = useState(false);\n  const [container, setContainer] = useState<HTMLElement | null>(null);\n\n  // Solo en cliente: habilitamos portal y resolvemos el contenedor\n  useEffect(() => {\n    setMounted(true);\n    setContainer(document.getElementById(\"toast-root\") ?? document.body);\n    return () => {\n      // limpiar timers al desmontar\n      Object.values(timers.current).forEach(clearTimeout);\n    };\n  }, []);\n\n  const remove = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n    if (timers.current[id]) {\n      clearTimeout(timers.current[id]);\n      delete timers.current[id];\n    }\n  }, []);\n\n  const toast = useCallback(\n    (opts: ToastOptions) => {\n      const id = Math.random().toString(36).slice(2);\n      const item: ToastItem = {\n        id,\n        opts: {\n          variant: opts.variant ?? \"info\",\n          title: opts.title ?? \"\",\n          description: opts.description ?? \"\",\n          emoji: opts.emoji ?? \"ℹ️\",\n          duration: opts.duration ?? 3500,\n        },\n      };\n      setToasts((prev) => [item, ...prev]);\n      timers.current[id] = setTimeout(() => remove(id), item.opts.duration);\n    },\n    [remove],\n  );\n\n  const value = useMemo(() => ({ toast }), [toast]);\n\n  // Render del portal solo cuando hay DOM disponible\n  const portal =\n    mounted && container\n      ? createPortal(\n          <div\n            className=\"\n              pointer-events-none fixed inset-0 z-[9999] flex flex-col items-end gap-2\n              p-4 sm:p-6\n            \"\n          >\n            {/* anclamos arriba a la derecha */}\n            <div className=\"ml-auto w-full max-w-sm space-y-2\">\n              {toasts.map(({ id, opts }) => (\n                <div\n                  key={id}\n                  className={`\n                    pointer-events-auto rounded-2xl border p-4 shadow-[0_10px_30px_rgba(0,0,0,0.10)]\n                    bg-white/95 backdrop-blur\n                    animate-in fade-in zoom-in-95 duration-200\n                    ${\n                      {\n                        success: \"border-green-200\",\n                        error: \"border-red-200\",\n                        info: \"border-[var(--color-brand-border)]\",\n                        warning: \"border-yellow-200\",\n                      }[opts.variant]\n                    }\n                  `}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-9 w-9 grid place-content-center rounded-xl border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                      {/* Mantén flexible: puedes forzar nativo si quieres colores originales */}\n                      <ColorEmoji\n                        emoji={opts.emoji}\n                        mode={opts.variant === \"error\" ? \"native\" : \"duotone\"}\n                      />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      {opts.title && (\n                        <p className=\"font-semibold text-[var(--color-brand-text)] truncate\">\n                          {opts.title}\n                        </p>\n                      )}\n                      {opts.description && (\n                        <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n                          {opts.description}\n                        </p>\n                      )}\n                    </div>\n                    <button\n                      onClick={() => remove(id)}\n                      className=\"\n                        ml-1 inline-flex h-8 w-8 items-center justify-center rounded-xl\n                        hover:bg-[var(--color-brand-background)]\n                        text-[var(--color-brand-text)]\n                      \"\n                      title=\"Cerrar\"\n                    >\n                      <span className=\"sr-only\">Cerrar</span>✖️\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>,\n          container,\n        )\n      : null;\n\n  return (\n    <ToastContext.Provider value={value}>\n      {children}\n      {portal}\n    </ToastContext.Provider>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/Toaster.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/UiCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/UploadHint.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ui/button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ui/card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ui/input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/components/ui/label.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/config/emojiTheme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/eslint.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/hooks/useNotesRealtime.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/hooks/usePatientsRealtime.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/audit.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [329, 332], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [329, 332], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [727, 730], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [727, 730], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [754, 757], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [754, 757], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [781, 784], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [781, 784], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type AuditEntry = {\n  id: string;\n  patient_id: string;\n  actor_id: string | null;\n  actor_email: string | null;\n  entity: \"patients\" | \"patient_notes\" | \"patient_files\" | string;\n  entity_id: string;\n  action: \"create\" | \"update\" | \"delete\" | string;\n  data: any | null;\n  created_at: string;\n};\n\nexport async function listAudit(patientId: string, limit = 200): Promise<AuditEntry[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"audit_log\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as AuditEntry[];\n}\n\nexport function fmtAuditRow(a: AuditEntry) {\n  const who = a.actor_email || \"Usuario\";\n  const when = new Date(a.created_at).toLocaleString();\n  const entityMap: Record<string, string> = {\n    patients: \"Paciente\",\n    patient_notes: \"Nota\",\n    patient_files: \"Archivo\",\n  };\n  const what = entityMap[a.entity] || a.entity;\n  const actionMap: Record<string, string> = {\n    create: \"creó\",\n    update: \"actualizó\",\n    delete: \"eliminó\",\n  };\n  const verb = actionMap[a.action] || a.action;\n  return `${who} ${verb} ${what} — ${when}`;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/database.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/org.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/patient-files.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1633, 1636], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1633, 1636], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1660, 1663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1660, 1663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1687, 1690], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1687, 1690], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3571, 3574], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3571, 3574], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3598, 3601], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3598, 3601], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3625, 3628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3625, 3628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4037, 4040], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4037, 4040], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4064, 4067], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4064, 4067], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4091, 4094], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4091, 4094], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientFile = {\n  id: string;\n  user_id: string;\n  patient_id: string;\n  path: string;\n  file_name: string;\n  size: number | null;\n  mime_type: string | null;\n  created_at: string;\n};\n\nconst MAX_MB = Number(process.env.NEXT_PUBLIC_UPLOAD_MAX_MB || 10);\nconst ALLOWED = String(process.env.NEXT_PUBLIC_UPLOAD_ALLOWED || \"image/*,application/pdf\");\nconst SIGNED_TTL = Number(process.env.NEXT_PUBLIC_SIGNED_URL_TTL || 300);\n\n// Soporta comodines tipo image/*, application/*\nfunction mimeAllowed(mime: string): boolean {\n  if (!mime) return false;\n  const parts = ALLOWED.split(/[,\\s]+/)\n    .map((s) => s.trim())\n    .filter(Boolean);\n  return parts.some((p) =>\n    p.endsWith(\"/*\") ? mime.startsWith(p.slice(0, -1)) : mime.toLowerCase() === p.toLowerCase(),\n  );\n}\n\n// Slug simple\nfunction slugify(name: string): string {\n  return name\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[^\\w.\\- ]+/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/-+/g, \"-\")\n    .slice(0, 100);\n}\n\nfunction randomId(len = 8): string {\n  const bytes = new Uint8Array(len);\n  crypto.getRandomValues(bytes);\n  return Array.from(bytes)\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n    .slice(0, len);\n}\n\nexport async function listPatientFiles(patientId: string): Promise<PatientFile[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_files\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false });\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientFile[];\n}\n\nexport async function uploadPatientFile(\n  patientId: string,\n  file: File,\n): Promise<PatientFile | null> {\n  const supabase = getSupabaseBrowser();\n\n  // Validaciones\n  const userRes = await supabase.auth.getUser();\n  const uid = userRes.data.user?.id;\n  if (!uid) throw new Error(\"No hay sesión.\");\n  if (!file) throw new Error(\"Archivo requerido.\");\n  const sizeMB = file.size / (1024 * 1024);\n  if (sizeMB > MAX_MB) throw new Error(`Archivo demasiado grande. Máximo ${MAX_MB} MB.`);\n  if (!mimeAllowed(file.type || \"\"))\n    throw new Error(`Tipo no permitido (${file.type || \"desconocido\"}). Permitidos: ${ALLOWED}`);\n\n  // **CLAVE COMPATIBLE CON RLS**: <uid>/patients/<patientId>/<yyyy>/<mm>/<timestamp>-<rand>-<slug>\n  const now = new Date();\n  const yyyy = now.getUTCFullYear();\n  const mm = String(now.getUTCMonth() + 1).padStart(2, \"0\");\n  const ts = now.toISOString().replace(/[:.Z]/g, \"\").replace(\"T\", \"-\");\n  const key = [\n    uid,\n    \"patients\",\n    patientId,\n    `${yyyy}`,\n    `${mm}`,\n    `${ts}-${randomId(6)}-${slugify(file.name)}`,\n  ].join(\"/\");\n\n  // Subida (bucket privado 'uploads')\n  const up = await supabase.storage.from(\"uploads\").upload(key, file, {\n    contentType: file.type || \"application/octet-stream\",\n    upsert: false,\n    cacheControl: \"3600\",\n  });\n  if (up.error) throw up.error;\n\n  // Inserta metadatos\n  const { data, error } = await supabase\n    .from(\"patient_files\")\n    .insert({\n      user_id: uid,\n      patient_id: patientId,\n      path: key,\n      file_name: file.name,\n      size: file.size,\n      mime_type: file.type || null,\n    })\n    .select(\"*\")\n    .single();\n\n  if (error) {\n    // Limpieza si falla el insert\n    await supabase.storage\n      .from(\"uploads\")\n      .remove([key])\n      .catch(() => {});\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  }\n\n  return data as PatientFile;\n}\n\nexport async function getSignedUrl(rec: PatientFile, ttlSeconds?: number): Promise<string> {\n  const supabase = getSupabaseBrowser();\n  const sec = Number(ttlSeconds || SIGNED_TTL || 300);\n  const { data, error } = await supabase.storage.from(\"uploads\").createSignedUrl(rec.path, sec);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data.signedUrl;\n}\n\nexport async function deletePatientFile(id: string): Promise<void> {\n  const supabase = getSupabaseBrowser();\n\n  // Obtén key\n  const { data: rec, error: e1 } = await supabase\n    .from(\"patient_files\")\n    .select(\"id, path\")\n    .eq(\"id\", id)\n    .single();\n  if (e1) throw e1;\n  const key = rec!.path as string;\n\n  // Borra en Storage\n  const r1 = await supabase.storage.from(\"uploads\").remove([key]);\n  if (r1.error) throw r1.error;\n\n  // Borra metadata\n  const { error: e2 } = await supabase.from(\"patient_files\").delete().eq(\"id\", id);\n  if (e2) throw e2;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/patient-notes.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [577, 580], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [577, 580], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [604, 607], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [604, 607], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [631, 634], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [631, 634], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1044, 1047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1044, 1047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1071, 1074], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1071, 1074], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1098, 1101], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1098, 1101], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1413, 1416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1413, 1416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1440, 1443], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1440, 1443], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1467, 1470], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1467, 1470], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientNote = {\n  id: string;\n  user_id: string;\n  patient_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n};\n\nexport async function listNotes(patientId: string, limit = 200): Promise<PatientNote[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_notes\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientNote[];\n}\n\nexport async function createNote(patientId: string, content: string): Promise<PatientNote> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_notes\")\n    .insert({ patient_id: patientId, content })\n    .select(\"*\")\n    .single();\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data as PatientNote;\n}\n\nexport async function deleteNote(noteId: string): Promise<boolean> {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patient_notes\").delete().eq(\"id\", noteId);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/patient-shares.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [556, 559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [556, 559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [583, 586], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [583, 586], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [610, 613], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [610, 613], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1232, 1235], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1232, 1235], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1259, 1262], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1259, 1262], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1286, 1289], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1286, 1289], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1588, 1591], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1588, 1591], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1615, 1618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1615, 1618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1642, 1645], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1642, 1645], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientShare = {\n  id: string;\n  owner_id: string;\n  patient_id: string;\n  grantee_email: string;\n  can_edit: boolean;\n  created_at: string;\n};\n\nexport async function listShares(patientId: string): Promise<PatientShare[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_shares\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false });\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientShare[];\n}\n\nexport async function addShare(patientId: string, email: string, canEdit: boolean) {\n  const supabase = getSupabaseBrowser();\n  const { data: me } = await supabase.auth.getUser();\n  if (!me?.user) throw new Error(\"No hay sesión.\");\n  const payload = {\n    owner_id: me.user.id,\n    patient_id: patientId,\n    grantee_email: email.trim(),\n    can_edit: !!canEdit,\n  };\n  const { data, error } = await supabase\n    .from(\"patient_shares\")\n    .insert(payload)\n    .select(\"*\")\n    .single();\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data as PatientShare;\n}\n\nexport async function revokeShare(shareId: string) {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patient_shares\").delete().eq(\"id\", shareId);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/patients-search.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/patients.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [697, 700], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [697, 700], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Database } from \"./database.types\";\nexport type Patient = Database[\"public\"][\"Tables\"][\"patients\"][\"Row\"];\nexport type NewPatient = Database[\"public\"][\"Tables\"][\"patients\"][\"Insert\"];\nexport type PatchPatient = Database[\"public\"][\"Tables\"][\"patients\"][\"Update\"];\nexport type Gender = Database[\"public\"][\"Enums\"][\"Gender\"];\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport type { Database, Gender } from \"@/lib/database.types\";\n\ntype PatientRow = Database[\"public\"][\"Tables\"][\"patients\"][\"Row\"];\ntype PatientInsert = Database[\"public\"][\"Tables\"][\"patients\"][\"Insert\"];\ntype PatientUpdate = Database[\"public\"][\"Tables\"][\"patients\"][\"Update\"];\n\nfunction raise(error: any): never {\n  throw new Error(error?.message ?? error?.details ?? error?.hint ?? \"Unknown error\");\n}\n\nexport async function listPatients(limit = 50) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patients\")\n    .select(\"*\")\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error) raise(error);\n  return data as PatientRow[];\n}\n\nexport async function getPatient(id: string) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase.from(\"patients\").select(\"*\").eq(\"id\", id).single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function createPatient(input: PatientInsert) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase.from(\"patients\").insert(input).select(\"*\").single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function updatePatient(id: string, patch: Omit<PatientUpdate, \"id\">) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patients\")\n    .update(patch)\n    .eq(\"id\", id)\n    .select(\"*\")\n    .single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function deletePatient(id: string) {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patients\").delete().eq(\"id\", id);\n  if (error) raise(error);\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/storage.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/supabase-browser.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/supabase/client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/lib/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/next.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/app/(app)/pacientes/[id]/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 253,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 253,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7489, 7492], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7489, 7492], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 380,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 380,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11067, 11070], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11067, 11070], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 916,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 916,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [33150, 33153], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [33150, 33153], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport type { Gender } from \"@/lib/database.types\";\nimport { useEffect, useState, useCallback, useRef } from \"react\";\nimport Link from \"next/link\";\nimport { useParams } from \"next/navigation\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport { getPatient, updatePatient, type Patient } from \"@/lib/patients\";\nimport { listNotes, createNote, deleteNote, type PatientNote } from \"@/lib/patient-notes\";\nimport {\n  listPatientFiles,\n  uploadPatientFile,\n  getSignedUrl,\n  deletePatientFile,\n  type PatientFile,\n} from \"@/lib/patient-files\";\nimport { listShares, addShare, revokeShare, type PatientShare } from \"@/lib/patient-shares\";\nimport { listAudit, fmtAuditRow, type AuditEntry } from \"@/lib/audit\";\nimport { showToast } from \"@/components/Toaster\";\nimport Modal from \"@/components/Modal\";\nimport { useNotesRealtime } from \"@/hooks/useNotesRealtime\";\nimport ExportPDFButton from \"@/components/ExportPDFButton\";\n\ntype PendingNote = PatientNote & { pending?: boolean };\ntype PendingFile = PatientFile & { pending?: boolean };\n\nexport default function PacienteDetailPage() {\n  const { id } = useParams<{ id: string }>();\n  const supabase = getSupabaseBrowser();\n\n  const [meId, setMeId] = useState<string | null>(null);\n  const [meEmail, setMeEmail] = useState<string | null>(null);\n\n  const [patient, setPatient] = useState<Patient | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const [shares, setShares] = useState<PatientShare[]>([]);\n  const isOwner = patient && meId ? patient.user_id === meId : false;\n  const myShare = shares.find(\n    (s) => s.grantee_email.toLowerCase() === (meEmail || \"\").toLowerCase(),\n  );\n  const canEdit = Boolean(isOwner || myShare?.can_edit);\n\n  const [openEdit, setOpenEdit] = useState(false);\n  const [nombre, setNombre] = useState(\"\");\n  const [edad, setEdad] = useState<number | \"\">(\"\");\n  const [genero, setGenero] = useState<Gender | \"\">(\"O\");\n  const [savingEdit, setSavingEdit] = useState(false);\n\n  const [notes, setNotes] = useState<PendingNote[]>([]);\n  const [noteText, setNoteText] = useState(\"\");\n  const [savingNote, setSavingNote] = useState(false);\n  const [loadingNotes, setLoadingNotes] = useState(true);\n\n  const [files, setFiles] = useState<PendingFile[]>([]);\n  const [loadingFiles, setLoadingFiles] = useState(true);\n  const [uploading, setUploading] = useState(false);\n\n  const [shareEmail, setShareEmail] = useState(\"\");\n  const [shareCanEdit, setShareCanEdit] = useState(false);\n  const [sharing, setSharing] = useState(false);\n\n  const [audits, setAudits] = useState<AuditEntry[]>([]);\n  const [loadingAudits, setLoadingAudits] = useState(true);\n\n  const printRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await supabase.auth.getUser();\n      setMeId(data.user?.id ?? null);\n      setMeEmail(data.user?.email ?? null);\n    })();\n  }, [supabase]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const p = await getPatient(id);\n        setPatient(p);\n        setNombre(p?.nombre ?? \"\");\n        setEdad(p?.edad ?? \"\");\n        setGenero((p?.genero as \"F\" | \"M\" | \"O\") ?? \"O\");\n      } catch (e: unknown) {\n        console.error(\n          e instanceof Error\n            ? e\n            : (() => {\n                try {\n                  return JSON.stringify(e);\n                } catch {\n                  return String(e);\n                }\n              })(),\n        );\n        showToast(e?.message || \"No se pudo cargar el paciente.\", \"error\");\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [id]);\n\n  const refreshNotes = useCallback(async () => {\n    setLoadingNotes(true);\n    try {\n      const data = await listNotes(id);\n      setNotes(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudieron cargar las notas.\", \"error\");\n    } finally {\n      setLoadingNotes(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshNotes();\n  }, [refreshNotes]);\n  useNotesRealtime(\n    id,\n    () => {\n      refreshNotes();\n    },\n    250,\n  );\n\n  const refreshFiles = useCallback(async () => {\n    setLoadingFiles(true);\n    try {\n      const data = await listPatientFiles(id);\n      setFiles(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudieron cargar los archivos.\", \"error\");\n    } finally {\n      setLoadingFiles(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshFiles();\n  }, [refreshFiles]);\n\n  const refreshShares = useCallback(async () => {\n    try {\n      const data = await listShares(id);\n      setShares(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshShares();\n  }, [refreshShares]);\n\n  const refreshAudits = useCallback(async () => {\n    setLoadingAudits(true);\n    try {\n      const data = await listAudit(id, 200);\n      setAudits(data);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo cargar la actividad.\", \"error\");\n    } finally {\n      setLoadingAudits(false);\n    }\n  }, [id]);\n\n  useEffect(() => {\n    refreshAudits();\n  }, [refreshAudits]);\n\n  // Al terminar el replay de la cola → refresca notas/archivos y limpia pendientes\n  useEffect(() => {\n    const onMsg = (e: MessageEvent) => {\n      const t = (e.data || {}).type;\n      if (t === \"queue:replay-success\") {\n        refreshNotes();\n        refreshFiles();\n      }\n    };\n    navigator.serviceWorker?.addEventListener?.(\"message\", onMsg);\n    return () => navigator.serviceWorker?.removeEventListener?.(\"message\", onMsg);\n  }, [refreshNotes, refreshFiles]);\n\n  async function onAddNote(e: React.FormEvent) {\n    e.preventDefault();\n    if (!canEdit) {\n      showToast(\"No tienes permisos para agregar notas.\", \"error\");\n      return;\n    }\n    const text = noteText.trim();\n    if (text.length < 2) {\n      showToast(\"Escribe al menos 2 caracteres.\", \"info\");\n      return;\n    }\n    setSavingNote(true);\n    try {\n      const n = await createNote(id, text);\n      setNotes((prev) => [n as PendingNote, ...prev]);\n      setNoteText(\"\");\n      showToast(\"Nota guardada.\", \"success\");\n    } catch (e: unknown) {\n      // Optimista: offline → agrega placeholder pendiente\n      if (typeof navigator !== \"undefined\" && !navigator.onLine) {\n        const temp: PendingNote = {\n          id: `local-${Date.now()}`,\n          patient_id: id,\n          content: text + \" (pendiente…)\",\n          created_at: new Date().toISOString(),\n          pending: true,\n        } as any;\n        setNotes((prev) => [temp, ...prev]);\n        setNoteText(\"\");\n        showToast(\"Nota encolada (sin conexión).\", \"info\");\n      } else {\n        console.error(\n          e instanceof Error\n            ? e\n            : (() => {\n                try {\n                  return JSON.stringify(e);\n                } catch {\n                  return String(e);\n                }\n              })(),\n        );\n        showToast(e?.message || \"No se pudo guardar la nota.\", \"error\");\n      }\n    } finally {\n      setSavingNote(false);\n    }\n  }\n\n  async function onDeleteNote(nid: string) {\n    if (!canEdit) {\n      showToast(\"No tienes permisos para borrar notas.\", \"error\");\n      return;\n    }\n    const local = nid.startsWith(\"local-\");\n    if (local) {\n      setNotes((prev) => prev.filter((n) => n.id !== nid));\n      return;\n    }\n    if (!confirm(\"¿Eliminar nota?\")) return;\n    try {\n      await deleteNote(nid);\n      setNotes((prev) => prev.filter((n) => n.id !== nid));\n      showToast(\"Nota eliminada.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo eliminar la nota.\", \"error\");\n    }\n  }\n\n  function openEditModal() {\n    if (!patient) return;\n    setNombre(patient.nombre);\n    setEdad(patient?.edad ?? \"\");\n    setGenero((patient?.genero as \"F\" | \"M\" | \"O\") ?? \"O\");\n    setOpenEdit(true);\n  }\n\n  async function onSaveEdit(e: React.FormEvent) {\n    e.preventDefault();\n    if (!canEdit) {\n      showToast(\"No tienes permisos para editar.\", \"error\");\n      return;\n    }\n    const n = (nombre || \"\").trim();\n    const eNum = typeof edad === \"string\" ? Number(edad || 0) : edad;\n    if (!n) {\n      showToast(\"El nombre es obligatorio.\", \"info\");\n      return;\n    }\n    if (!Number.isFinite(eNum) || eNum < 0) {\n      showToast(\"Edad inválida.\", \"error\");\n      return;\n    }\n\n    try {\n      setSavingEdit(true);\n      const updated = await updatePatient(id, { nombre: n, edad: eNum, genero });\n      setPatient(updated);\n      setOpenEdit(false);\n      showToast(\"Datos actualizados.\", \"success\");\n    } catch (err: unknown) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      showToast(err?.message || \"No se pudo actualizar.\", \"error\");\n    } finally {\n      setSavingEdit(false);\n    }\n  }\n\n  async function onUpload(e: React.ChangeEvent<HTMLInputElement>) {\n    const file = e.target.files?.[0];\n    if (!file) return;\n    if (!canEdit) {\n      showToast(\"No tienes permisos para subir archivos.\", \"error\");\n      return;\n    }\n    setUploading(true);\n    try {\n      await uploadPatientFile(id, file);\n      await refreshFiles();\n      (e.target as HTMLInputElement).value = \"\";\n      showToast(\"Archivo subido.\", \"success\");\n    } catch (err: unknown) {\n      if (typeof navigator !== \"undefined\" && !navigator.onLine) {\n        // Optimista: archivo pendiente\n        const temp: PendingFile = {\n          id: `local-${Date.now()}`,\n          patient_id: id,\n          file_name: file.name,\n          size: file.size,\n          mime_type: file.type || \"desconocido\",\n          created_at: new Date().toISOString(),\n          pending: true,\n        } as any;\n        setFiles((prev) => [temp, ...prev]);\n        (e.target as HTMLInputElement).value = \"\";\n        showToast(\"Archivo encolado (sin conexión).\", \"info\");\n      } else {\n        console.error(\n          err instanceof Error\n            ? err\n            : (() => {\n                try {\n                  return JSON.stringify(err);\n                } catch {\n                  return String(err);\n                }\n              })(),\n        );\n        showToast(err?.message || \"No se pudo subir el archivo.\", \"error\");\n      }\n    } finally {\n      setUploading(false);\n    }\n  }\n\n  async function onView(pf: PatientFile) {\n    try {\n      const url = await getSignedUrl(pf, 300);\n      window.open(url, \"_blank\", \"noopener,noreferrer\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo generar el enlace.\", \"error\");\n    }\n  }\n\n  async function onCopy(pf: PatientFile) {\n    try {\n      const url = await getSignedUrl(pf, 300);\n      await navigator.clipboard.writeText(url);\n      showToast(\"Enlace copiado (300s).\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo copiar el enlace.\", \"error\");\n    }\n  }\n\n  async function onDeleteFile(idRec: string) {\n    const local = idRec.startsWith(\"local-\");\n    if (local) {\n      setFiles((prev) => prev.filter((f) => f.id !== idRec));\n      return;\n    }\n    if (!canEdit) {\n      showToast(\"No tienes permisos para eliminar archivos.\", \"error\");\n      return;\n    }\n    if (!confirm(\"¿Eliminar archivo?\")) return;\n    try {\n      await deletePatientFile(idRec);\n      setFiles((prev) => prev.filter((f) => f.id !== idRec));\n      showToast(\"Archivo eliminado.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo eliminar.\", \"error\");\n    }\n  }\n\n  async function onShare(e: React.FormEvent) {\n    e.preventDefault();\n    if (!isOwner) {\n      showToast(\"Solo el dueño puede compartir.\", \"error\");\n      return;\n    }\n    const email = shareEmail.trim();\n    if (!/^[^@]+@[^@]+\\.[^@]+$/.test(email)) {\n      showToast(\"Email inválido.\", \"error\");\n      return;\n    }\n    setSharing(true);\n    try {\n      await addShare(id, email, shareCanEdit);\n      setShareEmail(\"\");\n      setShareCanEdit(false);\n      await refreshShares();\n      showToast(\"Acceso compartido.\", \"success\");\n    } catch (err: unknown) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      showToast(err?.message || \"No se pudo compartir.\", \"error\");\n    } finally {\n      setSharing(false);\n    }\n  }\n\n  async function onRevoke(shareId: string) {\n    if (!isOwner) return;\n    if (!confirm(\"¿Quitar acceso?\")) return;\n    try {\n      await revokeShare(shareId);\n      setShares((prev) => prev.filter((s) => s.id !== shareId));\n      showToast(\"Acceso revocado.\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo revocar.\", \"error\");\n    }\n  }\n\n  if (loading)\n    return (\n      <main className=\"p-6 md:p-10\">\n        <p>Cargando…</p>\n      </main>\n    );\n\n  if (!patient) {\n    return (\n      <main className=\"p-6 md:p-10\">\n        <div className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-6\">\n          <p className=\"text-red-600\">Paciente no encontrado.</p>\n          <Link\n            href=\"/pacientes\"\n            className=\"mt-3 inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n          >\n            <ColorEmoji token=\"atras\" size={16} /> Volver\n          </Link>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-6\">\n      {/* === ÁREA EXPORTABLE === */}\n      <div ref={printRef} className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-2xl md:text-3xl font-semibold text-[var(--color-brand-text)] flex items-center gap-3\">\n            <ColorEmoji token=\"usuario\" size={24} /> {patient.nombre}\n          </h1>\n          <div className=\"flex flex-wrap items-center gap-2\" data-html2canvas-ignore=\"true\">\n            <ExportPDFButton targetRef={printRef} filename={`Paciente-${patient.nombre}.pdf`} />\n            {canEdit && (\n              <button\n                onClick={openEditModal}\n                className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n              >\n                <ColorEmoji token=\"puzzle\" size={16} /> Editar\n              </button>\n            )}\n            <Link\n              href=\"/pacientes\"\n              className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)]\"\n            >\n              <ColorEmoji token=\"atras\" size={16} /> Volver\n            </Link>\n          </div>\n        </div>\n\n        {/* Datos básicos */}\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 grid grid-cols-1 sm:grid-cols-2 gap-4\">\n            <div>\n              <h2 className=\"font-semibold text-[var(--color-brand-text)]\">Datos básicos</h2>\n              <p className=\"text-[var(--color-brand-bluegray)] mt-1 text-sm\">\n                Edad: {patient.edad} · Género: {patient.genero}\n              </p>\n            </div>\n            <div>\n              <h2 className=\"font-semibold text-[var(--color-brand-text)]\">Creación</h2>\n              <p className=\"text-[var(--color-brand-bluegray)] mt-1 text-sm\">\n                {new Date(patient.created_at).toLocaleString()}\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Notas clínicas */}\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 space-y-4\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"puzzle\" size={18} /> Notas clínicas\n            </h2>\n\n            <form onSubmit={onAddNote} className=\"space-y-3\" data-html2canvas-ignore=\"true\">\n              <textarea\n                value={noteText}\n                onChange={(e) => setNoteText(e.target.value)}\n                placeholder={canEdit ? \"Escribe una nota clínica breve…\" : \"Solo lectura\"}\n                rows={3}\n                disabled={!canEdit}\n                className=\"w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2 disabled:opacity-60\"\n              />\n              <div className=\"flex gap-2\">\n                <button\n                  disabled={savingNote || !canEdit}\n                  className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n                >\n                  <ColorEmoji token=\"guardar\" size={16} />{\" \"}\n                  {savingNote ? \"Guardando…\" : \"Añadir nota\"}\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={refreshNotes}\n                  className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                >\n                  <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n                </button>\n              </div>\n            </form>\n\n            <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n            {loadingNotes ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">Cargando notas…</p>\n            ) : notes.length === 0 ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">Aún no hay notas.</p>\n            ) : (\n              <ul className=\"space-y-3\">\n                {notes.map((n) => (\n                  <li\n                    key={n.id}\n                    className={`rounded-xl border bg-white p-4 ${n.pending ? \"opacity-80 border-dashed\" : \"border-[var(--color-brand-border)]\"}`}\n                  >\n                    <div className=\"flex items-start justify-between gap-3\">\n                      <div className=\"text-sm text-[var(--color-brand-text)] whitespace-pre-wrap\">\n                        {n.content}\n                        {n.pending && (\n                          <span className=\"ml-2 inline-flex items-center gap-1 text-xs text-[var(--color-brand-bluegray)]\">\n                            <ColorEmoji token=\"refrescar\" size={14} /> Pendiente\n                          </span>\n                        )}\n                      </div>\n                      {canEdit && (\n                        <button\n                          onClick={() => onDeleteNote(n.id)}\n                          className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                          title=\"Eliminar nota\"\n                          data-html2canvas-ignore=\"true\"\n                        >\n                          <ColorEmoji token=\"borrar\" size={14} /> Borrar\n                        </button>\n                      )}\n                    </div>\n                    <div className=\"mt-2 text-xs text-[var(--color-brand-bluegray)]\">\n                      {new Date(n.created_at).toLocaleString()}\n                    </div>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </section>\n      </div>\n      {/* === FIN ÁREA EXPORTABLE === */}\n\n      {/* Archivos clínicos */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6 space-y-4\">\n          <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n            <ColorEmoji token=\"carpeta\" size={18} /> Archivos clínicos\n          </h2>\n\n          <div className=\"flex flex-wrap items-center gap-3\">\n            <label\n              className={`inline-flex items-center gap-2 rounded-xl border border-dashed border-[var(--color-brand-border)] bg-[var(--color-brand-background)] px-4 py-2 ${!canEdit ? \"opacity-60 cursor-not-allowed\" : \"cursor-pointer hover:opacity-90\"}`}\n            >\n              <ColorEmoji token=\"subir\" size={18} /> {uploading ? \"Subiendo…\" : \"Subir archivo\"}\n              <input type=\"file\" onChange={onUpload} className=\"hidden\" disabled={!canEdit} />\n            </label>\n            <button\n              type=\"button\"\n              onClick={refreshFiles}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n            </button>\n          </div>\n\n          <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n          {loadingFiles ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Cargando archivos…</p>\n          ) : files.length === 0 ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Aún no hay archivos.</p>\n          ) : (\n            <ul className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-3\">\n              {files.map((f) => (\n                <li\n                  key={f.id}\n                  className={`rounded-2xl border p-4 bg-white ${f.pending ? \"opacity-80 border-dashed\" : \"border-[var(--color-brand-border)]\"}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"rounded-xl p-3 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                      <ColorEmoji token=\"archivo\" size={20} />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      <div\n                        className=\"truncate text-[var(--color-brand-text)] text-sm font-medium\"\n                        title={f.file_name}\n                      >\n                        {f.file_name}{\" \"}\n                        {f.pending && (\n                          <span className=\"ml-2 text-xs text-[var(--color-brand-bluegray)]\">\n                            (Pendiente)\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"text-xs text-[var(--color-brand-bluegray)]\">\n                        {f.mime_type || \"desconocido\"} ·{\" \"}\n                        {f.size ? `${(f.size / 1024).toFixed(1)} KB` : \"\"}\n                      </div>\n                      <div className=\"mt-3 flex flex-wrap gap-2\">\n                        {!f.pending && (\n                          <>\n                            <button\n                              onClick={() => onView(f)}\n                              className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs hover:bg-[var(--color-brand-background)] inline-flex items-center gap-1\"\n                            >\n                              <ColorEmoji token=\"ver\" size={14} /> Ver\n                            </button>\n                            <button\n                              onClick={() => onCopy(f)}\n                              className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs hover:bg-[var(--color-brand-background)] inline-flex items-center gap-1\"\n                            >\n                              <ColorEmoji token=\"link\" size={14} /> Copiar link\n                            </button>\n                            {canEdit && (\n                              <button\n                                onClick={() => onDeleteFile(f.id)}\n                                className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                              >\n                                <ColorEmoji token=\"borrar\" size={14} /> Eliminar\n                              </button>\n                            )}\n                          </>\n                        )}\n                        {f.pending && (\n                          <button\n                            onClick={() => onDeleteFile(f.id)}\n                            className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs inline-flex items-center gap-1\"\n                          >\n                            <ColorEmoji token=\"borrar\" size={14} /> Quitar pendiente\n                          </button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </section>\n\n      {/* Compartir (solo dueño) */}\n      {isOwner && (\n        <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n          <div className=\"p-6 space-y-4\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"compartir\" size={18} /> Compartir acceso\n            </h2>\n\n            <form onSubmit={onShare} className=\"grid grid-cols-1 sm:grid-cols-5 gap-3\">\n              <input\n                type=\"email\"\n                value={shareEmail}\n                onChange={(e) => setShareEmail(e.target.value)}\n                placeholder=\"email@dominio.com\"\n                className=\"sm:col-span-3 rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n              <label className=\"inline-flex items-center gap-2 px-2\">\n                <input\n                  type=\"checkbox\"\n                  checked={shareCanEdit}\n                  onChange={(e) => setShareCanEdit(e.target.checked)}\n                />\n                Puede editar\n              </label>\n              <button\n                className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 flex items-center justify-center gap-2\"\n                disabled={sharing}\n              >\n                <ColorEmoji token=\"enviar\" size={16} /> {sharing ? \"Compartiendo…\" : \"Compartir\"}\n              </button>\n            </form>\n\n            <div className=\"h-px bg-[var(--color-brand-border)]\" />\n\n            {shares.length === 0 ? (\n              <p className=\"text-[var(--color-brand-bluegray)]\">\n                Aún no has compartido este paciente.\n              </p>\n            ) : (\n              <ul className=\"space-y-2\">\n                {shares.map((s) => (\n                  <li\n                    key={s.id}\n                    className=\"flex items-center justify-between rounded-xl border border-[var(--color-brand-border)] bg-white px-4 py-2\"\n                  >\n                    <div className=\"min-w-0\">\n                      <div className=\"text-sm text-[var(--color-brand-text)] truncate\">\n                        {s.grantee_email}\n                      </div>\n                      <div className=\"text-xs text-[var(--color-brand-bluegray)]\">\n                        {s.can_edit ? \"Puede editar\" : \"Solo lectura\"}\n                      </div>\n                    </div>\n                    <button\n                      onClick={() => onRevoke(s.id)}\n                      className=\"rounded-md border border-[var(--color-brand-border)] px-2 py-1 text-xs text-red-600 hover:bg-red-50 inline-flex items-center gap-1\"\n                    >\n                      <ColorEmoji token=\"borrar\" size={14} /> Revocar\n                    </button>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </section>\n      )}\n\n      {/* Actividad */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6 space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-lg font-semibold text-[var(--color-brand-text)] flex items-center gap-2\">\n              <ColorEmoji token=\"actividad\" size={18} /> Actividad\n            </h2>\n            <button\n              type=\"button\"\n              onClick={refreshAudits}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"refrescar\" size={16} /> Actualizar\n            </button>\n          </div>\n\n          {loadingAudits ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Cargando actividad…</p>\n          ) : audits.length === 0 ? (\n            <p className=\"text-[var(--color-brand-bluegray)]\">Sin eventos aún.</p>\n          ) : (\n            <ul className=\"space-y-2\">\n              {audits.map((a) => (\n                <li\n                  key={a.id}\n                  className=\"rounded-xl border border-[var(--color-brand-border)] bg-white px-4 py-2 text-sm text-[var(--color-brand-text)]\"\n                >\n                  {fmtAuditRow(a)}\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </section>\n\n      {/* Modal Editar */}\n      <Modal\n        open={openEdit}\n        onClose={() => setOpenEdit(false)}\n        title=\"Editar paciente\"\n        widthClass=\"max-w-xl\"\n      >\n        <form onSubmit={onSaveEdit} className=\"space-y-3\">\n          <label className=\"block\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Nombre</span>\n            <input\n              value={nombre}\n              onChange={(e) => setNombre(e.target.value)}\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              placeholder=\"Nombre completo\"\n              disabled={!canEdit}\n            />\n          </label>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <label className=\"block\">\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad</span>\n              <input\n                value={edad}\n                onChange={(e) => setEdad(e.target.value === \"\" ? \"\" : Number(e.target.value))}\n                type=\"number\"\n                min={0}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n                disabled={!canEdit}\n              />\n            </label>\n            <label className=\"block\">\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Género</span>\n              <select\n                value={genero}\n                onChange={(e) => setGenero(e.target.value as any)}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n                disabled={!canEdit}\n              >\n                <option value=\"F\">Femenino</option>\n                <option value=\"M\">Masculino</option>\n                <option value=\"O\">Otro</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"pt-2 flex justify-end gap-2\">\n            <button\n              type=\"button\"\n              onClick={() => setOpenEdit(false)}\n              className=\"rounded-md border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)]\"\n            >\n              Cancelar\n            </button>\n            <button\n              disabled={savingEdit || !canEdit}\n              className=\"rounded-md bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"guardar\" size={16} />{\" \"}\n              {savingEdit ? \"Guardando…\" : \"Guardar cambios\"}\n            </button>\n          </div>\n        </form>\n      </Modal>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/app/(app)/pacientes/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 85,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 88,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3330, 3333], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3330, 3333], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 173,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 173,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6312, 6315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6312, 6315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 185,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 185,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6920, 6923], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6920, 6923], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'doSearch'. Either include it or remove the dependency array.",
        "line": 51,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 51,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [doSearch]",
            "fix": { "range": [1420, 1422], "text": "[doSearch]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport Link from \"next/link\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport {\n  searchPatients,\n  type PatientSearchFilters,\n  type PatientSearchResult,\n} from \"@/lib/patients-search\";\n\nexport default function PacientesPage() {\n  const [filters, setFilters] = useState<PatientSearchFilters>({\n    q: \"\",\n    genero: \"ALL\",\n    edadMin: null,\n    edadMax: null,\n    createdFrom: null,\n    createdTo: null,\n    orderBy: \"created_at\",\n    orderDir: \"desc\",\n    page: 1,\n    pageSize: 10,\n  });\n  const [result, setResult] = useState<PatientSearchResult | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [err, setErr] = useState<string | null>(null);\n\n  const totalPages = useMemo(() => {\n    if (!result) return 1;\n    return Math.max(1, Math.ceil(result.count / result.pageSize));\n  }, [result]);\n\n  async function doSearch(nextPage?: number) {\n    setLoading(true);\n    setErr(null);\n    try {\n      const rs = await searchPatients({ ...filters, page: nextPage ?? filters.page });\n      setResult(rs);\n      setFilters((f) => ({ ...f, page: rs.page })); // sincroniza\n    } catch (e: unknown) {\n      setErr(e?.message || \"No se pudo buscar.\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    // primera carga\n    doSearch(1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function onSubmit(e: React.FormEvent) {\n    e.preventDefault();\n    doSearch(1);\n  }\n\n  function onClear() {\n    setFilters({\n      q: \"\",\n      genero: \"ALL\",\n      edadMin: null,\n      edadMax: null,\n      createdFrom: null,\n      createdTo: null,\n      orderBy: \"created_at\",\n      orderDir: \"desc\",\n      page: 1,\n      pageSize: 10,\n    });\n    setTimeout(() => doSearch(1), 0);\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-6\">\n      <header className=\"space-y-2\">\n        <h1 className=\"text-2xl md:text-3xl font-semibold text-[var(--color-brand-text)] flex items-center gap-3\">\n          <ColorEmoji token=\"pacientes\" size={24} />\n          Pacientes\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Filtra por nombre, género, edad y fechas. Resultados visibles respetan tus permisos\n          (propios o compartidos).\n        </p>\n      </header>\n\n      {/* Filtros */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <form onSubmit={onSubmit} className=\"p-6 grid grid-cols-1 md:grid-cols-12 gap-3\">\n          <label className=\"md:col-span-4\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Nombre</span>\n            <input\n              value={filters.q || \"\"}\n              onChange={(e) => setFilters((f) => ({ ...f, q: e.target.value }))}\n              placeholder=\"Buscar por nombre…\"\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            />\n          </label>\n\n          <label className=\"md:col-span-2\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80\">Género</span>\n            <select\n              value={filters.genero || \"ALL\"}\n              onChange={(e) => setFilters((f) => ({ ...f, genero: e.target.value as any }))}\n              className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            >\n              <option value=\"ALL\">Todos</option>\n              <option value=\"F\">Femenino</option>\n              <option value=\"M\">Masculino</option>\n              <option value=\"O\">Otro</option>\n            </select>\n          </label>\n\n          <div className=\"md:col-span-2 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad mín.</span>\n              <input\n                type=\"number\"\n                min={0}\n                value={filters.edadMin ?? \"\"}\n                onChange={(e) =>\n                  setFilters((f) => ({\n                    ...f,\n                    edadMin: e.target.value === \"\" ? null : Number(e.target.value),\n                  }))\n                }\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Edad máx.</span>\n              <input\n                type=\"number\"\n                min={0}\n                value={filters.edadMax ?? \"\"}\n                onChange={(e) =>\n                  setFilters((f) => ({\n                    ...f,\n                    edadMax: e.target.value === \"\" ? null : Number(e.target.value),\n                  }))\n                }\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n          </div>\n\n          <div className=\"md:col-span-3 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Desde</span>\n              <input\n                type=\"date\"\n                value={filters.createdFrom ?? \"\"}\n                onChange={(e) => setFilters((f) => ({ ...f, createdFrom: e.target.value || null }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Hasta</span>\n              <input\n                type=\"date\"\n                value={filters.createdTo ?? \"\"}\n                onChange={(e) => setFilters((f) => ({ ...f, createdTo: e.target.value || null }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              />\n            </label>\n          </div>\n\n          <div className=\"md:col-span-3 grid grid-cols-2 gap-3\">\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Ordenar por</span>\n              <select\n                value={filters.orderBy}\n                onChange={(e) => setFilters((f) => ({ ...f, orderBy: e.target.value as any }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              >\n                <option value=\"created_at\">Fecha</option>\n                <option value=\"nombre\">Nombre</option>\n                <option value=\"edad\">Edad</option>\n              </select>\n            </label>\n            <label>\n              <span className=\"text-sm text-[var(--color-brand-text)]/80\">Dirección</span>\n              <select\n                value={filters.orderDir}\n                onChange={(e) => setFilters((f) => ({ ...f, orderDir: e.target.value as any }))}\n                className=\"mt-1 w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n              >\n                <option value=\"desc\">Desc</option>\n                <option value=\"asc\">Asc</option>\n              </select>\n            </label>\n          </div>\n\n          <div className=\"md:col-span-12 flex flex-wrap gap-3 pt-1\">\n            <button\n              className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 inline-flex items-center gap-2\"\n              disabled={loading}\n              type=\"submit\"\n            >\n              <ColorEmoji token=\"buscar\" size={16} /> {loading ? \"Buscando…\" : \"Buscar\"}\n            </button>\n\n            <button\n              type=\"button\"\n              onClick={onClear}\n              className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"limpiar\" size={16} /> Limpiar\n            </button>\n\n            <div className=\"text-sm text-[var(--color-brand-bluegray)] self-center ml-auto\">\n              Página {result?.page ?? 1} de {totalPages} · {result?.count ?? 0} resultados\n            </div>\n          </div>\n        </form>\n      </section>\n\n      {/* Resultados */}\n      <section className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\">\n        <div className=\"p-6\">\n          {err && <p className=\"text-red-600 text-sm mb-3\">{err}</p>}\n\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full text-sm\">\n              <thead>\n                <tr className=\"text-left text-[var(--color-brand-text)] border-b border-[var(--color-brand-border)]\">\n                  <th className=\"py-2 pr-3\">Nombre</th>\n                  <th className=\"py-2 px-3\">Edad</th>\n                  <th className=\"py-2 px-3\">Género</th>\n                  <th className=\"py-2 px-3\">Creado</th>\n                  <th className=\"py-2 pl-3\"></th>\n                </tr>\n              </thead>\n              <tbody>\n                {!result || loading ? (\n                  <tr>\n                    <td colSpan={5} className=\"py-6 text-[var(--color-brand-bluegray)]\">\n                      Cargando…\n                    </td>\n                  </tr>\n                ) : result.rows.length === 0 ? (\n                  <tr>\n                    <td colSpan={5} className=\"py-6 text-[var(--color-brand-bluegray)]\">\n                      Sin resultados.\n                    </td>\n                  </tr>\n                ) : (\n                  result.rows.map((p) => (\n                    <tr\n                      key={p.id}\n                      className=\"border-b border-[var(--color-brand-border)] hover:bg-[var(--color-brand-background)]/50\"\n                    >\n                      <td className=\"py-2 pr-3 text-[var(--color-brand-text)]\">{p.nombre}</td>\n                      <td className=\"py-2 px-3\">{p.edad}</td>\n                      <td className=\"py-2 px-3\">{p.genero}</td>\n                      <td className=\"py-2 px-3\">{new Date(p.created_at).toLocaleString()}</td>\n                      <td className=\"py-2 pl-3\">\n                        <Link\n                          href={`/pacientes/${p.id}`}\n                          className=\"inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)]\"\n                        >\n                          Ver <ColorEmoji token=\"siguiente\" size={14} />\n                        </Link>\n                      </td>\n                    </tr>\n                  ))\n                )}\n              </tbody>\n            </table>\n          </div>\n\n          {/* Paginación */}\n          <div className=\"mt-4 flex items-center justify-between\">\n            <div className=\"text-sm text-[var(--color-brand-bluegray)]\">\n              Mostrando{\" \"}\n              {result && result.rows.length > 0 ? (result.page - 1) * result.pageSize + 1 : 0}\n              {\" – \"}\n              {result && result.rows.length > 0\n                ? (result.page - 1) * result.pageSize + result.rows.length\n                : 0}\n              {\" de \"}\n              {result?.count ?? 0}\n            </div>\n            <div className=\"flex gap-2\">\n              <button\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                disabled={loading || (result?.page ?? 1) <= 1}\n                onClick={() => doSearch((result?.page ?? 1) - 1)}\n              >\n                <ColorEmoji token=\"anterior\" size={14} /> Anterior\n              </button>\n              <button\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-1.5 hover:bg-[var(--color-brand-background)] inline-flex items-center gap-2\"\n                disabled={loading || (result?.page ?? 1) >= totalPages}\n                onClick={() => doSearch((result?.page ?? 1) + 1)}\n              >\n                Siguiente <ColorEmoji token=\"siguiente\" size={14} />\n              </button>\n            </div>\n          </div>\n        </div>\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/app/(app)/perfil/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1198, 1201], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1198, 1201], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1261, 1264], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1261, 1264], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 144,
        "column": 11,
        "nodeType": "JSXOpeningElement",
        "endLine": 144,
        "endColumn": 86,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { createClient, User } from \"@supabase/supabase-js\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { useToast } from \"@/components/Toast\";\n\nconst supabase = createClient(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n);\n\nexport default function PerfilPage() {\n  const router = useRouter();\n  const { toast } = useToast();\n\n  const [user, setUser] = useState<User | null>(null);\n  const [email, setEmail] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [avatarPath, setAvatarPath] = useState<string | null>(null);\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [saving, setSaving] = useState(false);\n\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    (async () => {\n      const { data } = await supabase.auth.getUser();\n      const u = data.user;\n      if (!u) {\n        router.push(\"/login\");\n        return;\n      }\n      setUser(u);\n      setEmail(u.email ?? \"\");\n      setName((u.user_metadata as any)?.full_name ?? \"\");\n      const path = (u.user_metadata as any)?.avatar_path ?? null;\n      setAvatarPath(path);\n      if (path) {\n        const { data: signed } = await supabase.storage\n          .from(\"uploads\")\n          .createSignedUrl(path, 60 * 60);\n        setAvatarUrl(signed?.signedUrl ?? null);\n      }\n      setLoading(false);\n    })();\n  }, [router]);\n\n  async function refreshSignedUrl(path: string | null) {\n    if (!path) {\n      setAvatarUrl(null);\n      return;\n    }\n    const { data } = await supabase.storage.from(\"uploads\").createSignedUrl(path, 60 * 60);\n    setAvatarUrl(data?.signedUrl ?? null);\n  }\n\n  async function handleSave(e: React.FormEvent) {\n    e.preventDefault();\n    if (!user) return;\n    setSaving(true);\n    const { error } = await supabase.auth.updateUser({\n      data: { full_name: name, avatar_path: avatarPath ?? null },\n    });\n    setSaving(false);\n    if (error) {\n      toast({ variant: \"error\", title: \"No se pudo guardar\", description: error.message });\n      return;\n    }\n    toast({ variant: \"success\", title: \"Perfil actualizado\" });\n  }\n\n  function triggerPick() {\n    fileRef.current?.click();\n  }\n\n  async function onPick(e: React.ChangeEvent<HTMLInputElement>) {\n    const f = e.target.files?.[0];\n    if (!f || !user) return;\n\n    if (!f.type.startsWith(\"image/\")) {\n      toast({\n        variant: \"error\",\n        title: \"Archivo no válido\",\n        description: \"Sube una imagen (PNG/JPG/WebP…)\",\n      });\n      e.target.value = \"\";\n      return;\n    }\n    if (f.size > 5 * 1024 * 1024) {\n      toast({ variant: \"error\", title: \"Imagen muy pesada\", description: \"Máx. 5 MB\" });\n      e.target.value = \"\";\n      return;\n    }\n\n    const ext = f.name.split(\".\").pop()?.toLowerCase() || \"png\";\n    const path = `avatars/${user.id}_${Date.now()}.${ext}`.replace(/\\s+/g, \"_\");\n\n    const { error } = await supabase.storage.from(\"uploads\").upload(path, f, {\n      upsert: false,\n    });\n    if (error) {\n      toast({ variant: \"error\", title: \"No se pudo subir el avatar\", description: error.message });\n      e.target.value = \"\";\n      return;\n    }\n\n    setAvatarPath(path);\n    await refreshSignedUrl(path);\n\n    // Guarda inmediatamente en metadata para que quede persistente\n    await supabase.auth.updateUser({ data: { full_name: name, avatar_path: path } });\n\n    toast({ variant: \"success\", title: \"Avatar actualizado\" });\n    e.target.value = \"\";\n  }\n\n  async function removeAvatar() {\n    if (!avatarPath) return setAvatarUrl(null);\n    const ok = window.confirm(\"¿Quitar avatar?\");\n    if (!ok) return;\n\n    // Intenta borrar el archivo (si falla, igual limpiamos metadata)\n    await supabase.storage.from(\"uploads\").remove([avatarPath]);\n\n    setAvatarPath(null);\n    setAvatarUrl(null);\n    await supabase.auth.updateUser({ data: { full_name: name, avatar_path: null } });\n    toast({ variant: \"success\", title: \"Avatar quitado\" });\n  }\n\n  async function signOut() {\n    await supabase.auth.signOut();\n    router.push(\"/login\");\n  }\n\n  const AvatarVisual = useMemo(() => {\n    return (\n      <div className=\"size-28 rounded-full overflow-hidden border border-[var(--color-brand-border)] bg-[var(--color-brand-background)] flex items-center justify-center\">\n        {avatarUrl ? (\n          // eslint-disable-next-line @next/next/no-img-element\n          <img src={avatarUrl} alt=\"Avatar\" className=\"w-full h-full object-cover\" />\n        ) : (\n          <div className=\"text-4xl\">\n            <ColorEmoji token=\"usuario\" size={40} />\n          </div>\n        )}\n      </div>\n    );\n  }, [avatarUrl]);\n\n  if (loading) {\n    return (\n      <main className=\"p-6 md:p-10\">\n        <div className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)] shadow-[0_10px_30px_rgba(0,0,0,0.06)] p-8 animate-pulse\">\n          <div className=\"h-7 w-48 bg-[var(--color-brand-background)] rounded mb-4\" />\n          <div className=\"h-5 w-80 bg-[var(--color-brand-background)] rounded\" />\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-8\">\n      {/* Encabezado */}\n      <header>\n        <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight flex items-center gap-3\">\n          <ColorEmoji token=\"usuario\" size={30} />\n          Perfil\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Actualiza tu información básica y tu avatar.\n        </p>\n      </header>\n\n      {/* Card principal */}\n      <section\n        className=\"\n          w-full rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n          shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-6 md:px-8 py-7\n        \"\n      >\n        <form onSubmit={handleSave} className=\"grid grid-cols-1 md:grid-cols-[auto,1fr] gap-6\">\n          {/* Columna avatar */}\n          <div className=\"flex flex-col items-start gap-4\">\n            {AvatarVisual}\n            <div className=\"flex gap-2\">\n              <button\n                type=\"button\"\n                onClick={triggerPick}\n                className=\"inline-flex items-center gap-2 rounded-xl px-3 py-2 text-sm bg-[var(--color-brand-primary)] text-white hover:brightness-95\"\n              >\n                <ColorEmoji token=\"imagen\" />\n                Subir avatar\n              </button>\n              <button\n                type=\"button\"\n                onClick={removeAvatar}\n                className=\"inline-flex items-center gap-2 rounded-xl px-3 py-2 text-sm bg-white border border-[var(--color-brand-border)] hover:brightness-95\"\n              >\n                <ColorEmoji token=\"limpiar\" />\n                Quitar\n              </button>\n            </div>\n            <input\n              ref={fileRef}\n              type=\"file\"\n              accept=\"image/*\"\n              className=\"hidden\"\n              onChange={onPick}\n            />\n          </div>\n\n          {/* Columna formulario */}\n          <div className=\"space-y-5\">\n            {/* Correo (solo lectura) */}\n            <div>\n              <label className=\"block text-sm text-[var(--color-brand-bluegray)] mb-1\">\n                Correo\n              </label>\n              <input\n                value={email}\n                readOnly\n                className=\"\n                  w-full rounded-2xl border border-[var(--color-brand-border)]\n                  bg-[color-mix(in_oklab,#fff_92%,var(--color-brand-background)_8%)]\n                  px-5 py-3 text-[var(--color-brand-text)]\n                \"\n              />\n            </div>\n\n            {/* Nombre para mostrar */}\n            <div>\n              <label className=\"block text-sm text-[var(--color-brand-bluegray)] mb-1\">\n                Nombre para mostrar\n              </label>\n              <input\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                placeholder=\"Tu nombre\"\n                className=\"\n                  w-full rounded-2xl border border-[var(--color-brand-border)]\n                  bg-white px-5 py-3 text-[var(--color-brand-text)]\n                  focus:outline-none focus:ring-2 focus:ring-[var(--color-brand-primary)]\n                \"\n              />\n            </div>\n\n            <div className=\"flex flex-wrap gap-3 pt-2\">\n              <button\n                type=\"submit\"\n                disabled={saving}\n                className=\"inline-flex items-center gap-2 rounded-2xl px-5 py-3 bg-[var(--color-brand-primary)] text-white hover:brightness-95 disabled:opacity-60\"\n              >\n                <ColorEmoji token=\"guardar\" />\n                Guardar cambios\n              </button>\n\n              <button\n                type=\"button\"\n                onClick={signOut}\n                className=\"inline-flex items-center gap-2 rounded-2xl px-5 py-3 bg-white border border-[var(--color-brand-border)] hover:brightness-95\"\n              >\n                <ColorEmoji token=\"salir\" />\n                Cerrar sesión\n              </button>\n            </div>\n          </div>\n        </form>\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/app/(app)/test-ui/upload/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useMemo' is defined but never used.",
        "line": 3,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [481, 484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [481, 484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refreshList'. Either include it or remove the dependency array.",
        "line": 71,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 71,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [refreshList]",
            "fix": { "range": [1922, 1924], "text": "[refreshList]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport UploadHint from \"@/components/UploadHint\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport { showToast } from \"@/components/Toaster\";\nimport { getSignedUrl } from \"@/lib/storage\";\n\ntype Obj = {\n  id?: string;\n  name: string;\n  updated_at?: string;\n  created_at?: string;\n  last_accessed_at?: string;\n  metadata?: Record<string, any>;\n};\n\nconst BUCKET = \"uploads\";\n\nexport default function UploadDemoPage() {\n  const supabase = getSupabaseBrowser();\n  const [files, setFiles] = useState<Obj[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [uploading, setUploading] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const hasFiles = files.length > 0;\n\n  const prettyDate = (iso?: string) => {\n    if (!iso) return \"—\";\n    try {\n      const d = new Date(iso);\n      return d.toLocaleString();\n    } catch {\n      return iso;\n    }\n  };\n\n  async function refreshList() {\n    setLoading(true);\n    try {\n      // Listamos en raíz. RLS ya limita a objetos owner = auth.uid()\n      const { data, error } = await supabase.storage.from(BUCKET).list(\"\", {\n        limit: 1000,\n        offset: 0,\n        sortBy: { column: \"created_at\", order: \"desc\" as const },\n      });\n      if (error) throw error;\n      setFiles(data || []);\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo obtener la lista.\", \"error\");\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    refreshList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  async function onUpload(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault();\n    const file = inputRef.current?.files?.[0];\n    if (!file) {\n      showToast(\"Elige un archivo primero.\", \"info\");\n      return;\n    }\n    setUploading(true);\n    try {\n      // Nombre con timestamp para evitar colisiones\n      const path = `${Date.now()}-${file.name}`;\n      const { error } = await supabase.storage.from(BUCKET).upload(path, file, {\n        cacheControl: \"3600\",\n        contentType: file.type || \"application/octet-stream\",\n        upsert: false,\n      });\n      if (error) throw error;\n      showToast(\"Archivo subido.\", \"success\");\n      inputRef.current!.value = \"\";\n      await refreshList();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo subir el archivo.\", \"error\");\n    } finally {\n      setUploading(false);\n    }\n  }\n\n  async function onCopyLink(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300); // 5 minutos\n      await navigator.clipboard.writeText(url);\n      showToast(\"Enlace temporal copiado (5 min).\", \"success\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(e?.message || \"No se pudo generar el enlace.\", \"error\");\n    }\n  }\n\n  async function onView(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300);\n      window.open(url, \"_blank\", \"noopener,noreferrer\");\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo abrir el archivo.\", \"error\");\n    }\n  }\n\n  async function onDownload(obj: Obj) {\n    try {\n      const url = await getSignedUrl(obj.name, 300);\n      const a = document.createElement(\"a\");\n      a.href = url;\n      a.download = obj.name;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo descargar.\", \"error\");\n    }\n  }\n\n  async function onDelete(obj: Obj) {\n    if (!confirm(`¿Eliminar \"${obj.name}\"?`)) return;\n    try {\n      const { error } = await supabase.storage.from(BUCKET).remove([obj.name]);\n      if (error) throw error;\n      showToast(\"Archivo eliminado.\", \"success\");\n      await refreshList();\n    } catch (e: unknown) {\n      console.error(\n        e instanceof Error\n          ? e\n          : (() => {\n              try {\n                return JSON.stringify(e);\n              } catch {\n                return String(e);\n              }\n            })(),\n      );\n      showToast(\"No se pudo eliminar.\", \"error\");\n    }\n  }\n\n  return (\n    <main className=\"p-6 md:p-10 space-y-8\">\n      {/* Encabezado */}\n      <header className=\"space-y-2\">\n        <h1 className=\"text-3xl md:text-4xl font-semibold text-[var(--color-brand-text)] tracking-tight flex items-center gap-3\">\n          <ColorEmoji token=\"documentos\" size={28} />\n          Subir & Gestionar archivos\n        </h1>\n        <p className=\"text-[var(--color-brand-bluegray)]\">\n          Bucket privado{\" \"}\n          <code className=\"rounded bg-[var(--color-brand-background)] px-1\">uploads</code> (RLS por\n          dueño).\n        </p>\n      </header>\n\n      {/* Uploader */}\n      <section\n        className=\"rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n                   shadow-[0_10px_30px_rgba(0,0,0,0.06)] overflow-hidden\"\n      >\n        <div className=\"p-6 flex flex-col gap-4 sm:flex-row sm:items-end\">\n          <label className=\"flex-1 space-y-2\">\n            <span className=\"text-sm text-[var(--color-brand-text)]/80 flex items-center gap-2\">\n              <ColorEmoji token=\"subirBandeja\" size={18} /> Archivo\n            </span>\n            <input\n              ref={inputRef}\n              type=\"file\"\n              className=\"block w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2\"\n            />\n          </label>\n          <button onClick={() => inputRef.current?.click()} className=\"hidden\" />\n          <form onSubmit={onUpload}>\n            <UploadHint />\n            <button\n              disabled={uploading}\n              className=\"rounded-xl bg-[var(--color-brand-primary)] px-4 py-2 text-white hover:opacity-90 disabled:opacity-60 flex items-center gap-2\"\n            >\n              <ColorEmoji token=\"subir\" size={18} />\n              {uploading ? \"Subiendo…\" : \"Subir\"}\n            </button>\n          </form>\n          <button\n            onClick={refreshList}\n            disabled={loading}\n            className=\"rounded-xl border border-[var(--color-brand-border)] px-4 py-2 hover:bg-[var(--color-brand-background)] flex items-center gap-2\"\n          >\n            <ColorEmoji token=\"refrescar\" size={18} />\n            {loading ? \"Actualizando…\" : \"Actualizar lista\"}\n          </button>\n        </div>\n      </section>\n\n      {/* Lista */}\n      <section className=\"grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {!hasFiles && !loading && (\n          <div className=\"col-span-full rounded-2xl border border-[var(--color-brand-border)] bg-white p-6 text-[var(--color-brand-bluegray)]\">\n            No hay archivos aún.\n          </div>\n        )}\n\n        {files.map((obj) => (\n          <article\n            key={obj.name}\n            className=\"group rounded-3xl bg-white/95 border border-[var(--color-brand-border)]\n                       shadow-[0_10px_30px_rgba(0,0,0,0.06)] hover:shadow-[0_14px_38px_rgba(0,0,0,0.08)]\n                       transition overflow-hidden\"\n          >\n            <div className=\"p-6 flex items-start gap-4\">\n              <div className=\"rounded-2xl p-4 border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                <ColorEmoji token=\"archivo\" size={24} />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-medium text-[var(--color-brand-text)] truncate\">{obj.name}</h3>\n                <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n                  Actualizado: {prettyDate(obj.updated_at || obj.created_at)}\n                </p>\n              </div>\n            </div>\n\n            <div className=\"h-px bg-[var(--color-brand-border)] mx-6\" />\n\n            <div className=\"p-4 grid grid-cols-2 gap-3 sm:grid-cols-4\">\n              <button\n                onClick={() => onView(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n              >\n                <ColorEmoji token=\"ver\" size={16} /> Ver\n              </button>\n              <button\n                onClick={() => onDownload(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n              >\n                <ColorEmoji token=\"descargar\" size={16} /> Descargar\n              </button>\n              <button\n                onClick={() => onCopyLink(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] flex items-center justify-center gap-2 text-sm\"\n                title=\"Signed URL (5 min)\"\n              >\n                <ColorEmoji token=\"enlace\" size={16} /> Copiar enlace\n              </button>\n              <button\n                onClick={() => onDelete(obj)}\n                className=\"rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-red-50 flex items-center justify-center gap-2 text-sm text-red-600\"\n              >\n                <ColorEmoji token=\"borrar\" size={16} /> Borrar\n              </button>\n            </div>\n          </article>\n        ))}\n      </section>\n    </main>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/components/EmojiTheme.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/components/ExportPDFButton.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 78,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 78,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2366, 2369], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2366, 2369], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useState } from \"react\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype Props = {\n  targetRef?: React.RefObject<HTMLElement | HTMLDivElement | null>;\n  targetId?: string; // alternativa si no usas ref\n  filename?: string; // ej: \"Paciente-Juan Perez.pdf\"\n  className?: string;\n  label?: string; // texto del botón\n};\n\nexport default function ExportPDFButton({\n  targetRef,\n  targetId,\n  filename = \"export.pdf\",\n  className = \"\",\n  label = \"Exportar PDF\",\n}: Props) {\n  const [busy, setBusy] = useState(false);\n\n  async function handleExport() {\n    setBusy(true);\n    try {\n      const el =\n        targetRef?.current ||\n        (targetId ? (document.getElementById(targetId) as HTMLElement | null) : null);\n      if (!el) throw new Error(\"No se encontró el contenedor a exportar.\");\n\n      const html2canvas = (await import(\"html2canvas\")).default;\n      const { jsPDF } = await import(\"jspdf\");\n\n      // Renderizamos a canvas con buena resolución\n      const canvas = await html2canvas(el, {\n        backgroundColor: \"#ffffff\",\n        scale: Math.min(window.devicePixelRatio || 1.5, 2), // límite para peso\n        useCORS: true,\n        // ignora nodos marcados con data-html2canvas-ignore\n        ignoreElements: (node) =>\n          node instanceof HTMLElement && node.getAttribute(\"data-html2canvas-ignore\") === \"true\",\n      });\n\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\n      const pdfW = pdf.internal.pageSize.getWidth();\n      const pdfH = pdf.internal.pageSize.getHeight();\n\n      // Calculamos tamaño manteniendo proporción\n      const imgW = pdfW;\n      const imgH = (canvas.height * imgW) / canvas.width;\n\n      let heightLeft = imgH;\n      let position = 0;\n\n      pdf.addImage(imgData, \"PNG\", 0, position, imgW, imgH);\n      heightLeft -= pdfH;\n\n      while (heightLeft > 0) {\n        position = heightLeft - imgH;\n        pdf.addPage();\n        pdf.addImage(imgData, \"PNG\", 0, position, imgW, imgH);\n        heightLeft -= pdfH;\n      }\n\n      pdf.save(filename);\n    } catch (err) {\n      console.error(\n        err instanceof Error\n          ? err\n          : (() => {\n              try {\n                return JSON.stringify(err);\n              } catch {\n                return String(err);\n              }\n            })(),\n      );\n      alert((err as any)?.message || \"No se pudo exportar el PDF.\");\n    } finally {\n      setBusy(false);\n    }\n  }\n\n  return (\n    <button\n      type=\"button\"\n      onClick={handleExport}\n      disabled={busy}\n      className={`inline-flex items-center gap-2 rounded-xl border border-[var(--color-brand-border)] px-3 py-2 hover:bg-[var(--color-brand-background)] disabled:opacity-60 ${className}`}\n      title=\"Exportar a PDF\"\n    >\n      <ColorEmoji token=\"exportar\" size={16} />\n      {busy ? \"Exportando…\" : label}\n    </button>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/components/InstallPrompt.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [145, 148], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [145, 148], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [414, 417], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [414, 417], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\n\nexport default function InstallPrompt() {\n  const [deferred, setDeferred] = useState<any>(null);\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    // No mostrar si el usuario ya lo descartó\n    if (typeof window !== \"undefined\" && localStorage.getItem(\"pwaInstallDismissed\") === \"1\") {\n      return;\n    }\n    const handler = (e: any) => {\n      e.preventDefault();\n      setDeferred(e);\n      setVisible(true);\n    };\n    window.addEventListener(\"beforeinstallprompt\", handler);\n    return () => window.removeEventListener(\"beforeinstallprompt\", handler);\n  }, []);\n\n  async function onInstall() {\n    if (!deferred) return;\n    deferred.prompt();\n    await deferred.userChoice;\n    setDeferred(null);\n    setVisible(false);\n  }\n\n  function onLater() {\n    try {\n      localStorage.setItem(\"pwaInstallDismissed\", \"1\");\n    } catch {}\n    setVisible(false);\n  }\n\n  if (!visible) return null;\n\n  return (\n    <div className=\"fixed bottom-4 left-0 right-0 mx-auto w-full max-w-sm\">\n      <div className=\"rounded-2xl border border-[var(--color-brand-border)] bg-white p-4 shadow\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"rounded-xl border border-[var(--color-brand-border)] bg-[var(--color-brand-background)] px-3 py-2\">\n            📲\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-[var(--color-brand-text)] font-medium\">Instala Sanoa</p>\n            <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n              Acceso más rápido, pantalla completa y uso offline básico.\n            </p>\n            <div className=\"mt-3 flex items-center gap-2\">\n              <button\n                onClick={onInstall}\n                className=\"rounded-md bg-[var(--color-brand-primary)] px-3 py-2 text-sm text-white hover:opacity-90\"\n              >\n                Instalar ahora\n              </button>\n              <button\n                onClick={onLater}\n                className=\"rounded-md border border-[var(--color-brand-border)] px-3 py-2 text-sm hover:bg-[var(--color-brand-background)]\"\n              >\n                Más tarde\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/components/OrgSwitcherBadge.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 18,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [715, 718], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [715, 718], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport { useEffect, useState } from \"react\";\nimport { listMyOrgs, getCurrentOrgId, setCurrentOrgId, type MyOrg } from \"@/lib/org\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\nimport { showToast } from \"@/components/Toaster\";\n\nexport default function OrgSwitcherBadge() {\n  const [orgs, setOrgs] = useState<MyOrg[]>([]);\n  const [current, setCurrent] = useState<string | null>(null);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const [list, cur] = await Promise.all([listMyOrgs(), getCurrentOrgId()]);\n        setOrgs(list);\n        setCurrent(cur);\n      } catch (e) {\n        // silencioso\n      }\n    })();\n\n    const onChanged = (e: any) => setCurrent(e.detail?.orgId || null);\n    window.addEventListener(\"sanoa:org-changed\", onChanged);\n    return () => window.removeEventListener(\"sanoa:org-changed\", onChanged);\n  }, []);\n\n  if (!current || orgs.length <= 1) return null;\n\n  const cur = orgs.find((o) => o.id === current);\n  const label = cur ? (cur.is_personal ? \"Personal\" : cur.name) : \"Organización\";\n\n  async function onChange(e: React.ChangeEvent<HTMLSelectElement>) {\n    const v = e.target.value;\n    setCurrent(v);\n    try {\n      await setCurrentOrgId(v);\n      showToast(\"Organización cambiada.\", \"success\");\n      // Opcional: refresca la página para que queries lean nueva org_id por triggers\n      // location.reload();\n    } catch (err: unknown) {\n      showToast(err?.message || \"No se pudo cambiar la organización.\", \"error\");\n    }\n    setOpen(false);\n  }\n\n  return (\n    <div className=\"fixed top-3 right-3 z-50 flex items-center gap-2\">\n      <div className=\"rounded-full border border-[var(--color-brand-border)] bg-white shadow-[0_10px_30px_rgba(0,0,0,0.06)] px-3 py-1.5\">\n        <button\n          onClick={() => setOpen((v) => !v)}\n          className=\"inline-flex items-center gap-2 text-sm\"\n        >\n          <ColorEmoji token=\"laboratorio\" size={16} />\n          <span className=\"max-w-[180px] truncate\">{label}</span>\n          <span aria-hidden>▾</span>\n        </button>\n      </div>\n      {open && (\n        <div className=\"absolute mt-10 right-0 w-[260px] rounded-2xl border border-[var(--color-brand-border)] bg-white shadow-lg p-2\">\n          <select\n            value={current ?? \"\"}\n            onChange={onChange}\n            className=\"w-full rounded-xl border border-[var(--color-brand-border)] bg-white px-3 py-2 text-sm\"\n          >\n            {orgs.map((o) => (\n              <option key={o.id} value={o.id}>\n                {o.is_personal ? \"Personal\" : o.name} {o.role !== \"owner\" ? `· ${o.role}` : \"\"}\n              </option>\n            ))}\n          </select>\n          <div className=\"pt-2 text-[11px] text-[var(--color-brand-bluegray)]\">\n            Cambia para trabajar en otra organización.\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/components/Toast.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1017, 1020], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1017, 1020], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'timers.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'timers.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 56,
        "column": 28,
        "nodeType": "Identifier",
        "endLine": 56,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\n\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { createPortal } from \"react-dom\";\nimport ColorEmoji from \"@/components/ColorEmoji\";\n\ntype ToastVariant = \"success\" | \"error\" | \"info\" | \"warning\";\n\ntype ToastOptions = {\n  variant?: ToastVariant;\n  title?: string;\n  description?: string;\n  emoji?: string;\n  duration?: number; // ms (default 3500)\n};\n\ntype ToastItem = {\n  id: string;\n  opts: Required<ToastOptions>;\n};\n\ntype ToastContextValue = {\n  toast: (opts: ToastOptions) => void;\n};\n\nconst ToastContext = createContext<ToastContextValue | undefined>(undefined);\n\nexport function useToast() {\n  const ctx = useContext(ToastContext);\n  if (!ctx) {\n    throw new Error(\"useToast debe usarse dentro de <ToastProvider />\");\n  }\n  return ctx;\n}\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<ToastItem[]>([]);\n  const timers = useRef<Record<string, any>>({});\n  const [mounted, setMounted] = useState(false);\n  const [container, setContainer] = useState<HTMLElement | null>(null);\n\n  // Solo en cliente: habilitamos portal y resolvemos el contenedor\n  useEffect(() => {\n    setMounted(true);\n    setContainer(document.getElementById(\"toast-root\") ?? document.body);\n    return () => {\n      // limpiar timers al desmontar\n      Object.values(timers.current).forEach(clearTimeout);\n    };\n  }, []);\n\n  const remove = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n    if (timers.current[id]) {\n      clearTimeout(timers.current[id]);\n      delete timers.current[id];\n    }\n  }, []);\n\n  const toast = useCallback(\n    (opts: ToastOptions) => {\n      const id = Math.random().toString(36).slice(2);\n      const item: ToastItem = {\n        id,\n        opts: {\n          variant: opts.variant ?? \"info\",\n          title: opts.title ?? \"\",\n          description: opts.description ?? \"\",\n          emoji: opts.emoji ?? \"ℹ️\",\n          duration: opts.duration ?? 3500,\n        },\n      };\n      setToasts((prev) => [item, ...prev]);\n      timers.current[id] = setTimeout(() => remove(id), item.opts.duration);\n    },\n    [remove],\n  );\n\n  const value = useMemo(() => ({ toast }), [toast]);\n\n  // Render del portal solo cuando hay DOM disponible\n  const portal =\n    mounted && container\n      ? createPortal(\n          <div\n            className=\"\n              pointer-events-none fixed inset-0 z-[9999] flex flex-col items-end gap-2\n              p-4 sm:p-6\n            \"\n          >\n            {/* anclamos arriba a la derecha */}\n            <div className=\"ml-auto w-full max-w-sm space-y-2\">\n              {toasts.map(({ id, opts }) => (\n                <div\n                  key={id}\n                  className={`\n                    pointer-events-auto rounded-2xl border p-4 shadow-[0_10px_30px_rgba(0,0,0,0.10)]\n                    bg-white/95 backdrop-blur\n                    animate-in fade-in zoom-in-95 duration-200\n                    ${\n                      {\n                        success: \"border-green-200\",\n                        error: \"border-red-200\",\n                        info: \"border-[var(--color-brand-border)]\",\n                        warning: \"border-yellow-200\",\n                      }[opts.variant]\n                    }\n                  `}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"h-9 w-9 grid place-content-center rounded-xl border border-[var(--color-brand-border)] bg-[var(--color-brand-background)]\">\n                      {/* Mantén flexible: puedes forzar nativo si quieres colores originales */}\n                      <ColorEmoji\n                        emoji={opts.emoji}\n                        mode={opts.variant === \"error\" ? \"native\" : \"duotone\"}\n                      />\n                    </div>\n                    <div className=\"min-w-0 flex-1\">\n                      {opts.title && (\n                        <p className=\"font-semibold text-[var(--color-brand-text)] truncate\">\n                          {opts.title}\n                        </p>\n                      )}\n                      {opts.description && (\n                        <p className=\"text-sm text-[var(--color-brand-bluegray)]\">\n                          {opts.description}\n                        </p>\n                      )}\n                    </div>\n                    <button\n                      onClick={() => remove(id)}\n                      className=\"\n                        ml-1 inline-flex h-8 w-8 items-center justify-center rounded-xl\n                        hover:bg-[var(--color-brand-background)]\n                        text-[var(--color-brand-text)]\n                      \"\n                      title=\"Cerrar\"\n                    >\n                      <span className=\"sr-only\">Cerrar</span>✖️\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>,\n          container,\n        )\n      : null;\n\n  return (\n    <ToastContext.Provider value={value}>\n      {children}\n      {portal}\n    </ToastContext.Provider>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/config/emojiTheme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/audit.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [329, 332], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [329, 332], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [727, 730], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [727, 730], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [754, 757], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [754, 757], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [781, 784], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [781, 784], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type AuditEntry = {\n  id: string;\n  patient_id: string;\n  actor_id: string | null;\n  actor_email: string | null;\n  entity: \"patients\" | \"patient_notes\" | \"patient_files\" | string;\n  entity_id: string;\n  action: \"create\" | \"update\" | \"delete\" | string;\n  data: any | null;\n  created_at: string;\n};\n\nexport async function listAudit(patientId: string, limit = 200): Promise<AuditEntry[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"audit_log\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as AuditEntry[];\n}\n\nexport function fmtAuditRow(a: AuditEntry) {\n  const who = a.actor_email || \"Usuario\";\n  const when = new Date(a.created_at).toLocaleString();\n  const entityMap: Record<string, string> = {\n    patients: \"Paciente\",\n    patient_notes: \"Nota\",\n    patient_files: \"Archivo\",\n  };\n  const what = entityMap[a.entity] || a.entity;\n  const actionMap: Record<string, string> = {\n    create: \"creó\",\n    update: \"actualizó\",\n    delete: \"eliminó\",\n  };\n  const verb = actionMap[a.action] || a.action;\n  return `${who} ${verb} ${what} — ${when}`;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/database.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/org.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/patient-files.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1633, 1636], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1633, 1636], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1660, 1663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1660, 1663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1687, 1690], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1687, 1690], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3571, 3574], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3571, 3574], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3598, 3601], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3598, 3601], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3625, 3628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3625, 3628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4037, 4040], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4037, 4040], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4064, 4067], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4064, 4067], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4091, 4094], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4091, 4094], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientFile = {\n  id: string;\n  user_id: string;\n  patient_id: string;\n  path: string;\n  file_name: string;\n  size: number | null;\n  mime_type: string | null;\n  created_at: string;\n};\n\nconst MAX_MB = Number(process.env.NEXT_PUBLIC_UPLOAD_MAX_MB || 10);\nconst ALLOWED = String(process.env.NEXT_PUBLIC_UPLOAD_ALLOWED || \"image/*,application/pdf\");\nconst SIGNED_TTL = Number(process.env.NEXT_PUBLIC_SIGNED_URL_TTL || 300);\n\n// Soporta comodines tipo image/*, application/*\nfunction mimeAllowed(mime: string): boolean {\n  if (!mime) return false;\n  const parts = ALLOWED.split(/[,\\s]+/)\n    .map((s) => s.trim())\n    .filter(Boolean);\n  return parts.some((p) =>\n    p.endsWith(\"/*\") ? mime.startsWith(p.slice(0, -1)) : mime.toLowerCase() === p.toLowerCase(),\n  );\n}\n\n// Slug simple\nfunction slugify(name: string): string {\n  return name\n    .normalize(\"NFD\")\n    .replace(/[\\u0300-\\u036f]/g, \"\")\n    .replace(/[^\\w.\\- ]+/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/-+/g, \"-\")\n    .slice(0, 100);\n}\n\nfunction randomId(len = 8): string {\n  const bytes = new Uint8Array(len);\n  crypto.getRandomValues(bytes);\n  return Array.from(bytes)\n    .map((b) => b.toString(16).padStart(2, \"0\"))\n    .join(\"\")\n    .slice(0, len);\n}\n\nexport async function listPatientFiles(patientId: string): Promise<PatientFile[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_files\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false });\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientFile[];\n}\n\nexport async function uploadPatientFile(\n  patientId: string,\n  file: File,\n): Promise<PatientFile | null> {\n  const supabase = getSupabaseBrowser();\n\n  // Validaciones\n  const userRes = await supabase.auth.getUser();\n  const uid = userRes.data.user?.id;\n  if (!uid) throw new Error(\"No hay sesión.\");\n  if (!file) throw new Error(\"Archivo requerido.\");\n  const sizeMB = file.size / (1024 * 1024);\n  if (sizeMB > MAX_MB) throw new Error(`Archivo demasiado grande. Máximo ${MAX_MB} MB.`);\n  if (!mimeAllowed(file.type || \"\"))\n    throw new Error(`Tipo no permitido (${file.type || \"desconocido\"}). Permitidos: ${ALLOWED}`);\n\n  // **CLAVE COMPATIBLE CON RLS**: <uid>/patients/<patientId>/<yyyy>/<mm>/<timestamp>-<rand>-<slug>\n  const now = new Date();\n  const yyyy = now.getUTCFullYear();\n  const mm = String(now.getUTCMonth() + 1).padStart(2, \"0\");\n  const ts = now.toISOString().replace(/[:.Z]/g, \"\").replace(\"T\", \"-\");\n  const key = [\n    uid,\n    \"patients\",\n    patientId,\n    `${yyyy}`,\n    `${mm}`,\n    `${ts}-${randomId(6)}-${slugify(file.name)}`,\n  ].join(\"/\");\n\n  // Subida (bucket privado 'uploads')\n  const up = await supabase.storage.from(\"uploads\").upload(key, file, {\n    contentType: file.type || \"application/octet-stream\",\n    upsert: false,\n    cacheControl: \"3600\",\n  });\n  if (up.error) throw up.error;\n\n  // Inserta metadatos\n  const { data, error } = await supabase\n    .from(\"patient_files\")\n    .insert({\n      user_id: uid,\n      patient_id: patientId,\n      path: key,\n      file_name: file.name,\n      size: file.size,\n      mime_type: file.type || null,\n    })\n    .select(\"*\")\n    .single();\n\n  if (error) {\n    // Limpieza si falla el insert\n    await supabase.storage\n      .from(\"uploads\")\n      .remove([key])\n      .catch(() => {});\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  }\n\n  return data as PatientFile;\n}\n\nexport async function getSignedUrl(rec: PatientFile, ttlSeconds?: number): Promise<string> {\n  const supabase = getSupabaseBrowser();\n  const sec = Number(ttlSeconds || SIGNED_TTL || 300);\n  const { data, error } = await supabase.storage.from(\"uploads\").createSignedUrl(rec.path, sec);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data.signedUrl;\n}\n\nexport async function deletePatientFile(id: string): Promise<void> {\n  const supabase = getSupabaseBrowser();\n\n  // Obtén key\n  const { data: rec, error: e1 } = await supabase\n    .from(\"patient_files\")\n    .select(\"id, path\")\n    .eq(\"id\", id)\n    .single();\n  if (e1) throw e1;\n  const key = rec!.path as string;\n\n  // Borra en Storage\n  const r1 = await supabase.storage.from(\"uploads\").remove([key]);\n  if (r1.error) throw r1.error;\n\n  // Borra metadata\n  const { error: e2 } = await supabase.from(\"patient_files\").delete().eq(\"id\", id);\n  if (e2) throw e2;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/patient-notes.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [577, 580], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [577, 580], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [604, 607], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [604, 607], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [631, 634], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [631, 634], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1044, 1047], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1044, 1047], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1071, 1074], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1071, 1074], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1098, 1101], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1098, 1101], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1413, 1416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1413, 1416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1440, 1443], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1440, 1443], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1467, 1470], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1467, 1470], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientNote = {\n  id: string;\n  user_id: string;\n  patient_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n};\n\nexport async function listNotes(patientId: string, limit = 200): Promise<PatientNote[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_notes\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientNote[];\n}\n\nexport async function createNote(patientId: string, content: string): Promise<PatientNote> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_notes\")\n    .insert({ patient_id: patientId, content })\n    .select(\"*\")\n    .single();\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data as PatientNote;\n}\n\nexport async function deleteNote(noteId: string): Promise<boolean> {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patient_notes\").delete().eq(\"id\", noteId);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/patient-shares.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [556, 559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [556, 559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [583, 586], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [583, 586], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [610, 613], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [610, 613], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1232, 1235], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1232, 1235], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1259, 1262], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1259, 1262], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 43,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 43,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1286, 1289], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1286, 1289], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1588, 1591], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1588, 1591], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1615, 1618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1615, 1618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1642, 1645], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1642, 1645], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getSupabaseBrowser } from \"@/lib/supabase-browser\";\n\nexport type PatientShare = {\n  id: string;\n  owner_id: string;\n  patient_id: string;\n  grantee_email: string;\n  can_edit: boolean;\n  created_at: string;\n};\n\nexport async function listShares(patientId: string): Promise<PatientShare[]> {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patient_shares\")\n    .select(\"*\")\n    .eq(\"patient_id\", patientId)\n    .order(\"created_at\", { ascending: false });\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return (data || []) as PatientShare[];\n}\n\nexport async function addShare(patientId: string, email: string, canEdit: boolean) {\n  const supabase = getSupabaseBrowser();\n  const { data: me } = await supabase.auth.getUser();\n  if (!me?.user) throw new Error(\"No hay sesión.\");\n  const payload = {\n    owner_id: me.user.id,\n    patient_id: patientId,\n    grantee_email: email.trim(),\n    can_edit: !!canEdit,\n  };\n  const { data, error } = await supabase\n    .from(\"patient_shares\")\n    .insert(payload)\n    .select(\"*\")\n    .single();\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return data as PatientShare;\n}\n\nexport async function revokeShare(shareId: string) {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patient_shares\").delete().eq(\"id\", shareId);\n  if (error)\n    throw new Error(\n      (error as any)?.message ?? (error as any)?.details ?? (error as any)?.hint ?? \"Unknown error\",\n    );\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/patients.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [697, 700], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [697, 700], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { Database } from \"./database.types\";\nexport type Patient = Database[\"public\"][\"Tables\"][\"patients\"][\"Row\"];\nexport type NewPatient = Database[\"public\"][\"Tables\"][\"patients\"][\"Insert\"];\nexport type PatchPatient = Database[\"public\"][\"Tables\"][\"patients\"][\"Update\"];\nexport type Gender = Database[\"public\"][\"Enums\"][\"Gender\"];\nimport { getSupabaseBrowser } from \"@/lib/supabase-browser\";\nimport type { Database, Gender } from \"@/lib/database.types\";\n\ntype PatientRow = Database[\"public\"][\"Tables\"][\"patients\"][\"Row\"];\ntype PatientInsert = Database[\"public\"][\"Tables\"][\"patients\"][\"Insert\"];\ntype PatientUpdate = Database[\"public\"][\"Tables\"][\"patients\"][\"Update\"];\n\nfunction raise(error: any): never {\n  throw new Error(error?.message ?? error?.details ?? error?.hint ?? \"Unknown error\");\n}\n\nexport async function listPatients(limit = 50) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patients\")\n    .select(\"*\")\n    .order(\"created_at\", { ascending: false })\n    .limit(limit);\n  if (error) raise(error);\n  return data as PatientRow[];\n}\n\nexport async function getPatient(id: string) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase.from(\"patients\").select(\"*\").eq(\"id\", id).single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function createPatient(input: PatientInsert) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase.from(\"patients\").insert(input).select(\"*\").single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function updatePatient(id: string, patch: Omit<PatientUpdate, \"id\">) {\n  const supabase = getSupabaseBrowser();\n  const { data, error } = await supabase\n    .from(\"patients\")\n    .update(patch)\n    .eq(\"id\", id)\n    .select(\"*\")\n    .single();\n  if (error) raise(error);\n  return data as PatientRow;\n}\n\nexport async function deletePatient(id: string) {\n  const supabase = getSupabaseBrowser();\n  const { error } = await supabase.from(\"patients\").delete().eq(\"id\", id);\n  if (error) raise(error);\n  return true;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/supabase-browser.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/supabase/client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/logs/diag-2025-09-10-013258/snapshot/lib/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/next.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/next.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/postcss.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/public/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/scripts/generate-icons.mjs",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'maskable' is assigned a value but never used.",
        "line": 7,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import fs from \"fs/promises\";\nimport sharp from \"sharp\";\n\nconst brandBg = \"#D97A66\";   // terracota\nconst brandText = \"#FFFFFF\"; // texto claro\n\nfunction svgIcon(size, { maskable = false } = {}) {\n  const r = Math.round(size * 0.18);               // radio de borde redondeado\n  const fontSize = Math.round(size * 0.52);        // tamaño letra \"S\"\n  // Para maskable, el arte debe ser \"full-bleed\". Centramos el contenido igual.\n  return `\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${size}\" height=\"${size}\">\n  <rect width=\"${size}\" height=\"${size}\" rx=\"${r}\" ry=\"${r}\" fill=\"${brandBg}\"/>\n  <g transform=\"translate(${size/2},${size/2})\">\n    <text x=\"0\" y=\"${fontSize/3}\" text-anchor=\"middle\"\n      font-family=\"Poppins, Lato, system-ui, sans-serif\"\n      font-size=\"${fontSize}\" font-weight=\"700\" fill=\"${brandText}\">\n      S\n    </text>\n  </g>\n</svg>\n`.trim();\n}\n\nasync function generate() {\n  await fs.mkdir(\"public/icons\", { recursive: true });\n\n  // 192x192\n  await sharp(Buffer.from(svgIcon(192)))\n    .png()\n    .toFile(\"public/icons/icon-192.png\");\n\n  // 512x512\n  await sharp(Buffer.from(svgIcon(512)))\n    .png()\n    .toFile(\"public/icons/icon-512.png\");\n\n  // Maskable 512x512 (mismo arte, válido para \"maskable\")\n  await sharp(Buffer.from(svgIcon(512, { maskable: true })))\n    .png()\n    .toFile(\"public/icons/maskable-512.png\");\n\n  console.log(\"✅ Icons escritos en public/icons/\");\n}\n\ngenerate().catch((e) => {\n  console.error(e);\n  process.exit(1);\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/sentry.client.config.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [553, 556], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [553, 556], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as Sentry from \"@sentry/nextjs\";\n\nconst DSN = process.env.NEXT_PUBLIC_SENTRY_DSN || \"\";\nconst ENV = process.env.NEXT_PUBLIC_SENTRY_ENV || process.env.NODE_ENV || \"development\";\n\nif (typeof window !== \"undefined\" && DSN) {\n  Sentry.init({\n    dsn: DSN,\n    environment: ENV,\n    tracesSampleRate: 0.1, // cliente un poco menor\n    sendDefaultPii: false,\n    beforeSend(event) {\n      // Evita enviar cualquier cookie/query sensible desde el navegador\n      if (event.request?.headers) {\n        const h = event.request.headers as Record<string, any>;\n        const block = [\n          \"cookie\",\n          \"authorization\",\n          \"x-supabase-auth\",\n          \"sb-access-token\",\n          \"sb-refresh-token\",\n        ];\n        for (const k of block) if (h[k] != null) h[k] = \"[REDACTED]\";\n      }\n      return event;\n    },\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/workspaces/sanoa-lab/sentry.server.config.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 15,
        "column": 59,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 15,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [503, 506], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [503, 506], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as Sentry from \"@sentry/nextjs\";\n\nconst DSN = process.env.NEXT_PUBLIC_SENTRY_DSN || \"\";\nconst ENV = process.env.NEXT_PUBLIC_SENTRY_ENV || process.env.NODE_ENV || \"development\";\n\nif (DSN) {\n  Sentry.init({\n    dsn: DSN,\n    environment: ENV,\n    tracesSampleRate: 0.15, // ajusta si necesitas más/menos performance\n    sendDefaultPii: false,\n    beforeSend(event) {\n      // Redacta headers sensibles\n      if (event.request?.headers) {\n        const h = event.request.headers as Record<string, any>;\n        const block = [\n          \"cookie\",\n          \"authorization\",\n          \"x-supabase-auth\",\n          \"sb-access-token\",\n          \"sb-refresh-token\",\n        ];\n        for (const k of block) {\n          if (h[k] != null) h[k] = \"[REDACTED]\";\n          if (h[k.toLowerCase?.()] != null) h[k.toLowerCase()] = \"[REDACTED]\";\n          if (h[k.toUpperCase?.()] != null) h[k.toUpperCase()] = \"[REDACTED]\";\n        }\n      }\n      return event;\n    },\n  });\n}\n",
    "usedDeprecatedRules": []
  }
]
